; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	RemoveGrain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SSE_Repair18@@YAXPAEHPBEHHHHH@Z		; SSE_Repair18
PUBLIC	?SmartRG@@YAXPAEHPBEHHHHH@Z			; SmartRG
PUBLIC	?smartbob_bottom@@YAXPAEHPBEHHHHH@Z		; smartbob_bottom
PUBLIC	?smartbob_top@@YAXPAEHPBEHHHHH@Z		; smartbob_top
PUBLIC	?bob_bottom@@YAXPAEHPBEHHHHH@Z			; bob_bottom
PUBLIC	?bob_top@@YAXPAEHPBEHHHHH@Z			; bob_top
PUBLIC	?SSE_RemoveGrain12@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain12
PUBLIC	?SSE_RemoveGrain11@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain11
PUBLIC	?SSE_RemoveGrain10@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain10
PUBLIC	?diag9@@YAXPAEHPBEHHHHH@Z			; diag9
PUBLIC	?diag8@@YAXPAEHPBEHHHHH@Z			; diag8
PUBLIC	?diag7@@YAXPAEHPBEHHHHH@Z			; diag7
PUBLIC	?diag6@@YAXPAEHPBEHHHHH@Z			; diag6
PUBLIC	?diag5@@YAXPAEHPBEHHHHH@Z			; diag5
PUBLIC	?SSE_RemoveGrain4@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain4
PUBLIC	?SSE_RemoveGrain3@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain3
PUBLIC	?SSE_RemoveGrain2@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain2
PUBLIC	?SSE_RemoveGrain1@@YAXPAEHPBEHHHHH@Z		; SSE_RemoveGrain1
PUBLIC	?copy_yv12@@YAXPAEHPBEHHHHH@Z			; copy_yv12
PUBLIC	?clenseargs@@3PADA				; clenseargs
_DATA	SEGMENT
_cleaning_methods DD FLAT:?copy_yv12@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain1@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain2@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain3@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain4@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?diag5@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?diag6@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?diag7@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?diag8@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?diag9@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain10@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain11@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_RemoveGrain12@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?bob_top@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?bob_bottom@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?smartbob_top@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?smartbob_bottom@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SmartRG@@YAXPAEHPBEHHHHH@Z
	DD	FLAT:?SSE_Repair18@@YAXPAEHPBEHHHHH@Z
?clenseargs@@3PADA DB 'c[grey]b[planar]b[cache]i', 00H	; clenseargs
_DATA	ENDS
CONST	SEGMENT
$SG64951 DB	'widths = %u, %u, heights = %u, %u, color spaces = %X, %X'
	DB	0aH, 00H
	ORG $+2
$SG64952 DB	'%s: clips must be of equal type', 00H
	ORG $+4
_convolution_bias DW 08H
	DW	08H
	DW	08H
	DW	08H
_fconvolution_bias DB 01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
$SG65637 DB	'c[mode]i[modeU]i[modeV]i[planar]b', 00H
	ORG $+2
$SG65638 DB	'RemoveGrain', 00H
$SG65639 DB	'c[grey]b[reduceflicker]b[planar]b[cache]i', 00H
	ORG $+2
$SG65640 DB	'Clense', 00H
	ORG $+1
$SG65641 DB	'ccc[grey]b[planar]b', 00H
$SG65642 DB	'MCClense', 00H
	ORG $+3
$SG65643 DB	'BackwardClense', 00H
	ORG $+1
$SG65644 DB	'ForwardClense', 00H
	ORG $+2
$SG65646 DB	'RemoveGrain needs an SSE capable cpu!', 0aH, 00H
	ORG $+1
$SG65647 DB	'RemoveGrain: remove grain from film', 00H
CONST	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?debug_printf@@YAXPBDZZ				; debug_printf
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	_vsprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_buffer$ = -208						; size = 200
__$ArrayPad$ = -8					; size = 4
_args$ = -4						; size = 4
_format$ = 8						; size = 4
?debug_printf@@YAXPBDZZ PROC				; debug_printf
; File c:\temp\irc\rg2\removegrain.cpp
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 72
	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax
; Line 73
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_vsprintf
	add	esp, 12					; 0000000cH
; Line 74
	mov	DWORD PTR _args$[ebp], 0
; Line 75
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__OutputDebugStringA@4
; Line 76
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?debug_printf@@YAXPBDZZ ENDP				; debug_printf
_TEXT	ENDS
PUBLIC	?do_nothing@@YAXPAEHPBEHHHHH@Z			; do_nothing
; Function compile flags: /Odtp
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
_sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?do_nothing@@YAXPAEHPBEHHHHH@Z PROC			; do_nothing
; Line 412
	push	ebp
	mov	ebp, esp
; Line 413
	pop	ebp
	ret	0
?do_nothing@@YAXPAEHPBEHHHHH@Z ENDP			; do_nothing
_TEXT	ENDS
_BSS	SEGMENT
_AVSenvironment DD 01H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
_sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?copy_yv12@@YAXPAEHPBEHHHHH@Z PROC			; copy_yv12
; Line 417
	push	ebp
	mov	ebp, esp
; Line 418
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hblocks$[ebp]
	mov	edx, DWORD PTR _remainder$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+18]
	push	eax
	mov	ecx, DWORD PTR _spitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sp$[ebp]
	push	edx
	mov	eax, DWORD PTR _dpitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _AVSenvironment
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _AVSenvironment
	push	ecx
	mov	edx, DWORD PTR [eax+64]
	call	edx
; Line 419
	pop	ebp
	ret	0
?copy_yv12@@YAXPAEHPBEHHHHH@Z ENDP			; copy_yv12
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain4@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain4
; Line 529
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 530
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 531
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 535
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 539
	mov	esi, DWORD PTR __sp$[ebp]
; Line 543
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 545
	sub	esi, ebx
; Line 546
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 547
	neg	eax
; Line 548
	mov	edi, DWORD PTR _dp$[ebp]
; Line 553
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$64984:
; Line 556
	movq	mm0, MMWORD PTR [esi]
; Line 557
	movq	mm7, MMWORD PTR [esi+1]
; Line 558
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 559
	movq	mm6, MMWORD PTR [esi+2]
; Line 560
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 561
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 562
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 563
	movq	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
	pmaxub	mm1, mm5
	pminub	mm1, mm0
	pmaxub	mm0, mm5
; Line 564
	movd	DWORD PTR [edi], mm5
; Line 565
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 566
	movq	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 567
	movq	mm5, MMWORD PTR [esi+ebx*2+1]
; Line 568
	pmaxub	mm4, mm6
	pminub	mm4, mm3
	pmaxub	mm3, mm6
	pminub	mm3, mm2
	pmaxub	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
; Line 569
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
; Line 570
	pmaxub	mm4, mm5
	pminub	mm4, mm3
	pmaxub	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
; Line 574
	pmaxub	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
; Line 578
	pmaxub	mm4, MMWORD PTR [esi+ebx+1]
; Line 580
	pminub	mm3, mm4
; Line 581
	movq	MMWORD PTR [edi+1], mm3
; Line 583
	add	esi, 8
; Line 584
	add	edi, 9
; Line 585
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	8
$middle_loop$64985:
; Line 589
	movq	mm0, MMWORD PTR [esi]
; Line 590
	movq	mm7, MMWORD PTR [esi+1]
; Line 591
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 592
	movq	mm6, MMWORD PTR [esi+2]
; Line 593
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 594
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 595
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 596
	movq	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
	pmaxub	mm1, mm5
	pminub	mm1, mm0
	pmaxub	mm0, mm5
; Line 618
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 619
	movq	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 620
	movq	mm5, MMWORD PTR [esi+ebx*2+1]
; Line 621
	pmaxub	mm4, mm6
	pminub	mm4, mm3
	pmaxub	mm3, mm6
	pminub	mm3, mm2
	pmaxub	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
; Line 622
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
; Line 623
	pmaxub	mm4, mm5
	pminub	mm4, mm3
	pmaxub	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
; Line 631
	pmaxub	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
; Line 638
	pmaxub	mm4, MMWORD PTR [esi+ebx+1]
; Line 641
	add	esi, 8
; Line 642
	pminub	mm3, mm4
; Line 644
	movq	MMWORD PTR [edi], mm3
; Line 645
	add	edi, 8
; Line 646
	dec	ecx
; Line 647
	jne	$middle_loop$64985
; Line 649
	add	esi, edx
; Line 650
	add	edi, edx
; Line 651
	movq	mm0, MMWORD PTR [esi]
; Line 652
	movq	mm7, MMWORD PTR [esi+1]
; Line 653
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 654
	movq	mm6, MMWORD PTR [esi+2]
; Line 655
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 656
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 657
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 658
	movq	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
	pmaxub	mm1, mm5
	pminub	mm1, mm0
	pmaxub	mm0, mm5
; Line 660
	movq	MMWORD PTR [edi+1], mm7
; Line 682
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 683
	movq	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 684
	movq	mm5, MMWORD PTR [esi+ebx*2+1]
; Line 685
	pmaxub	mm4, mm6
	pminub	mm4, mm3
	pmaxub	mm3, mm6
	pminub	mm3, mm2
	pmaxub	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
; Line 686
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
; Line 687
	pmaxub	mm4, mm5
	pminub	mm4, mm3
	pmaxub	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
; Line 695
	pmaxub	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
; Line 702
	pmaxub	mm4, MMWORD PTR [esi+ebx+1]
; Line 705
	pminub	mm3, mm4
; Line 707
	add	esi, eax
; Line 708
	movq	MMWORD PTR [edi], mm3
; Line 709
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 710
	dec	DWORD PTR _height$[ebp]
; Line 715
	jne	$column_loop$64984
; Line 717
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain4@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain4
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain1@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain1
; Line 720
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 721
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 722
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 726
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 730
	mov	esi, DWORD PTR __sp$[ebp]
; Line 734
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 736
	sub	esi, ebx
; Line 737
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 738
	neg	eax
; Line 739
	mov	edi, DWORD PTR _dp$[ebp]
; Line 744
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$64996:
; Line 747
	movq	mm0, MMWORD PTR [esi]
; Line 748
	movq	mm5, MMWORD PTR [esi+1]
; Line 749
	movq	mm1, mm0
; Line 750
	movq	mm4, MMWORD PTR [esi+2]
; Line 751
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 752
	movq	mm5, MMWORD PTR [esi+ebx*2]
; Line 753
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 754
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
; Line 755
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 756
	movq	mm5, MMWORD PTR [esi+ebx*2+2]
; Line 757
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 758
	movq	mm4, MMWORD PTR [esi+ebx]
; Line 759
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 760
	movq	mm5, MMWORD PTR [esi+ebx+2]
; Line 761
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 762
	movd	DWORD PTR [edi], mm4
; Line 763
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 764
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 765
	pminub	mm0, mm1
; Line 766
	movq	MMWORD PTR [edi+1], mm0
; Line 768
	add	esi, 8
; Line 769
	add	edi, 9
; Line 770
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	9
$middle_loop$64997:
; Line 774
	movq	mm0, MMWORD PTR [esi]
; Line 775
	movq	mm5, MMWORD PTR [esi+1]
; Line 776
	movq	mm1, mm0
; Line 777
	movq	mm4, MMWORD PTR [esi+2]
; Line 778
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 779
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 780
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 781
	movq	mm5, MMWORD PTR [esi+ebx*2+1]
; Line 782
	pminub	mm0, mm6
	pmaxub	mm1, mm6
; Line 783
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
; Line 784
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 785
	movq	mm6, MMWORD PTR [esi+ebx]
; Line 786
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 794
	movq	mm5, MMWORD PTR [esi+ebx+2]
; Line 795
	pminub	mm0, mm6
	pmaxub	mm1, mm6
; Line 796
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 801
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 803
	pminub	mm0, mm1
; Line 804
	add	esi, 8
; Line 805
	movq	MMWORD PTR [edi], mm0
; Line 806
	add	edi, 8
; Line 811
	loop	$middle_loop$64997
; Line 814
	add	esi, edx
; Line 815
	add	edi, edx
; Line 816
	movq	mm0, MMWORD PTR [esi]
; Line 817
	movq	mm5, MMWORD PTR [esi+1]
; Line 818
	movq	mm1, mm0
; Line 819
	movq	mm4, MMWORD PTR [esi+2]
; Line 820
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 821
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 822
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 823
	movq	mm5, MMWORD PTR [esi+ebx*2+1]
; Line 824
	pminub	mm0, mm6
	pmaxub	mm1, mm6
; Line 825
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
; Line 826
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 827
	movq	mm6, MMWORD PTR [esi+ebx]
; Line 828
	pminub	mm0, mm4
	pmaxub	mm1, mm4
; Line 836
	movq	mm5, MMWORD PTR [esi+ebx+2]
; Line 837
	pminub	mm0, mm6
	pmaxub	mm1, mm6
; Line 839
	movq	MMWORD PTR [edi+1], mm5
; Line 841
	pminub	mm0, mm5
	pmaxub	mm1, mm5
; Line 846
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 848
	pminub	mm0, mm1
; Line 849
	movq	MMWORD PTR [edi], mm0
; Line 850
	add	esi, eax
; Line 851
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 852
	dec	DWORD PTR _height$[ebp]
; Line 857
	jne	$column_loop$64996
; Line 859
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain1@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain1
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain2@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain2
; Line 862
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 863
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 864
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 868
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 872
	mov	esi, DWORD PTR __sp$[ebp]
; Line 876
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 878
	sub	esi, ebx
; Line 879
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 880
	neg	eax
; Line 881
	mov	edi, DWORD PTR _dp$[ebp]
; Line 886
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65008:
; Line 889
	movq	mm0, MMWORD PTR [esi]
; Line 890
	movq	mm7, MMWORD PTR [esi+1]
; Line 891
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 892
	movq	mm6, MMWORD PTR [esi+2]
; Line 893
	movq	mm7, MMWORD PTR [esi+ebx]
; Line 894
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 895
	movd	DWORD PTR [edi], mm7
; Line 896
	movq	mm6, MMWORD PTR [esi+ebx+2]
; Line 897
	movq	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 898
	movq	mm5, MMWORD PTR [esi+ebx*2]
; Line 899
	pminub	mm2, mm6
	pmaxub	mm1, mm6
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm6
	pmaxub	mm0, mm6
; Line 900
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 901
	pminub	mm2, mm5
	pmaxub	mm1, mm5
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm5
	pmaxub	mm0, mm5
; Line 902
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
; Line 903
	pminub	mm2, mm7
	pmaxub	mm1, mm7
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm7
	pmaxub	mm0, mm7
; Line 907
	pminub	mm2, mm6
	pmaxub	mm1, mm6
	pmaxub	mm2, mm3
	pminub	mm1, mm0
; Line 911
	pmaxub	mm2, MMWORD PTR [esi+ebx+1]
; Line 913
	pminub	mm1, mm2
; Line 914
	movq	MMWORD PTR [edi+1], mm1
; Line 916
	add	esi, 8
; Line 917
	add	edi, 9
; Line 918
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	7
$middle_loop$65009:
; Line 922
	movq	mm0, MMWORD PTR [esi]
; Line 923
	movq	mm7, MMWORD PTR [esi+1]
; Line 924
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 925
	movq	mm6, MMWORD PTR [esi+2]
; Line 926
	movq	mm7, MMWORD PTR [esi+ebx]
; Line 927
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 931
	movq	mm6, MMWORD PTR [esi+ebx+2]
; Line 933
	movq	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 938
	movq	mm5, MMWORD PTR [esi+ebx*2]
; Line 939
	pminub	mm2, mm6
	pmaxub	mm1, mm6
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm6
	pmaxub	mm0, mm6
; Line 940
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 941
	pminub	mm2, mm5
	pmaxub	mm1, mm5
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm5
	pmaxub	mm0, mm5
; Line 942
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
; Line 943
	pminub	mm2, mm7
	pmaxub	mm1, mm7
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm7
	pmaxub	mm0, mm7
; Line 951
	pminub	mm2, mm6
	pmaxub	mm1, mm6
	pmaxub	mm2, mm3
	pminub	mm1, mm0
; Line 958
	pmaxub	mm2, MMWORD PTR [esi+ebx+1]
; Line 961
	pminub	mm1, mm2
; Line 962
	add	esi, 8
; Line 963
	movq	MMWORD PTR [edi], mm1
; Line 964
	add	edi, 8
; Line 965
	dec	ecx
; Line 966
	jne	$middle_loop$65009
; Line 968
	add	esi, edx
; Line 969
	add	edi, edx
; Line 970
	movq	mm0, MMWORD PTR [esi]
; Line 971
	movq	mm7, MMWORD PTR [esi+1]
; Line 972
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 973
	movq	mm6, MMWORD PTR [esi+2]
; Line 974
	movq	mm7, MMWORD PTR [esi+ebx]
; Line 975
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 979
	movq	mm6, MMWORD PTR [esi+ebx+2]
; Line 981
	movq	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 987
	movq	MMWORD PTR [edi+1], mm6
; Line 989
	movq	mm5, MMWORD PTR [esi+ebx*2]
; Line 990
	pminub	mm2, mm6
	pmaxub	mm1, mm6
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm6
	pmaxub	mm0, mm6
; Line 991
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 992
	pminub	mm2, mm5
	pmaxub	mm1, mm5
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm5
	pmaxub	mm0, mm5
; Line 993
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
; Line 994
	pminub	mm2, mm7
	pmaxub	mm1, mm7
	pmaxub	mm2, mm3
	pminub	mm1, mm0
	pminub	mm3, mm7
	pmaxub	mm0, mm7
; Line 1002
	pminub	mm2, mm6
	pmaxub	mm1, mm6
	pmaxub	mm2, mm3
	pminub	mm1, mm0
; Line 1009
	pmaxub	mm2, MMWORD PTR [esi+ebx+1]
; Line 1012
	pminub	mm1, mm2
; Line 1013
	add	esi, eax
; Line 1014
	movq	MMWORD PTR [edi], mm1
; Line 1015
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1016
	dec	DWORD PTR _height$[ebp]
; Line 1021
	jne	$column_loop$65008
; Line 1023
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain2@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain2
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain3@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain3
; Line 1026
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1027
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 1028
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 1032
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 1036
	mov	esi, DWORD PTR __sp$[ebp]
; Line 1040
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 1042
	sub	esi, ebx
; Line 1043
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 1044
	neg	eax
; Line 1045
	mov	edi, DWORD PTR _dp$[ebp]
; Line 1050
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65020:
; Line 1053
	movq	mm0, MMWORD PTR [esi]
; Line 1054
	movq	mm7, MMWORD PTR [esi+1]
; Line 1055
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 1056
	movq	mm6, MMWORD PTR [esi+2]
; Line 1057
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 1058
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 1059
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 1060
	movq	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
	pmaxub	mm1, mm5
	pminub	mm1, mm0
	pmaxub	mm0, mm5
; Line 1061
	movd	DWORD PTR [edi], mm5
; Line 1062
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 1063
	movq	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 1064
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 1065
	movq	mm5, mm6
	pminub	mm5, mm4
	pmaxub	mm4, mm6
	pminub	mm4, mm3
	pmaxub	mm3, mm6
	pminub	mm3, mm2
	pmaxub	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 1066
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
; Line 1067
	pminub	mm3, mm7
	pmaxub	mm2, mm7
	pmaxub	mm3, mm4
	pminub	mm2, mm1
	pminub	mm4, mm7
	pmaxub	mm1, mm7
	pmaxub	mm4, mm5
	pminub	mm1, mm0
; Line 1071
	pminub	mm3, mm6
	pmaxub	mm2, mm6
	pmaxub	mm3, mm4
	pminub	mm2, mm1
; Line 1075
	pmaxub	mm3, MMWORD PTR [esi+ebx+1]
; Line 1077
	pminub	mm3, mm2
; Line 1078
	movq	MMWORD PTR [edi+1], mm3
; Line 1080
	add	esi, 8
; Line 1081
	add	edi, 9
; Line 1082
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	9
$middle_loop$65021:
; Line 1086
	movq	mm0, MMWORD PTR [esi]
; Line 1087
	movq	mm7, MMWORD PTR [esi+1]
; Line 1088
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 1089
	movq	mm6, MMWORD PTR [esi+2]
; Line 1090
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 1091
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 1092
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 1093
	movq	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
	pmaxub	mm1, mm5
	pminub	mm1, mm0
	pmaxub	mm0, mm5
; Line 1113
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 1114
	movq	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 1115
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 1116
	movq	mm5, mm6
	pminub	mm5, mm4
	pmaxub	mm4, mm6
	pminub	mm4, mm3
	pmaxub	mm3, mm6
	pminub	mm3, mm2
	pmaxub	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 1117
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
; Line 1118
	pminub	mm3, mm7
	pmaxub	mm2, mm7
	pmaxub	mm3, mm4
	pminub	mm2, mm1
	pminub	mm4, mm7
	pmaxub	mm1, mm7
	pmaxub	mm4, mm5
	pminub	mm1, mm0
; Line 1126
	pminub	mm3, mm6
	pmaxub	mm2, mm6
	pmaxub	mm3, mm4
	pminub	mm2, mm1
; Line 1133
	pmaxub	mm3, MMWORD PTR [esi+ebx+1]
; Line 1137
	pminub	mm3, mm2
; Line 1138
	add	esi, 8
; Line 1139
	movq	MMWORD PTR [edi], mm3
; Line 1140
	add	edi, 8
; Line 1141
	dec	ecx
; Line 1142
	jne	$middle_loop$65021
; Line 1144
	add	esi, edx
; Line 1145
	add	edi, edx
; Line 1146
	movq	mm0, MMWORD PTR [esi]
; Line 1147
	movq	mm7, MMWORD PTR [esi+1]
; Line 1148
	movq	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 1149
	movq	mm6, MMWORD PTR [esi+2]
; Line 1150
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 1151
	movq	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 1152
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 1153
	movq	mm3, mm5
	pminub	mm3, mm2
	pmaxub	mm2, mm5
	pminub	mm2, mm1
	pmaxub	mm1, mm5
	pminub	mm1, mm0
	pmaxub	mm0, mm5
; Line 1174
	movq	MMWORD PTR [edi+1], mm7
; Line 1176
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 1177
	movq	mm4, mm7
	pminub	mm4, mm3
	pmaxub	mm3, mm7
	pminub	mm3, mm2
	pmaxub	mm2, mm7
	pminub	mm2, mm1
	pmaxub	mm1, mm7
	pminub	mm1, mm0
	pmaxub	mm0, mm7
; Line 1178
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 1179
	movq	mm5, mm6
	pminub	mm5, mm4
	pmaxub	mm4, mm6
	pminub	mm4, mm3
	pmaxub	mm3, mm6
	pminub	mm3, mm2
	pmaxub	mm2, mm6
	pminub	mm2, mm1
	pmaxub	mm1, mm6
	pminub	mm1, mm0
	pmaxub	mm0, mm6
; Line 1180
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
; Line 1181
	pminub	mm3, mm7
	pmaxub	mm2, mm7
	pmaxub	mm3, mm4
	pminub	mm2, mm1
	pminub	mm4, mm7
	pmaxub	mm1, mm7
	pmaxub	mm4, mm5
	pminub	mm1, mm0
; Line 1189
	pminub	mm3, mm6
	pmaxub	mm2, mm6
	pmaxub	mm3, mm4
	pminub	mm2, mm1
; Line 1196
	pmaxub	mm3, MMWORD PTR [esi+ebx+1]
; Line 1200
	pminub	mm3, mm2
; Line 1201
	add	esi, eax
; Line 1202
	movq	MMWORD PTR [edi], mm3
; Line 1203
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1204
	dec	DWORD PTR _height$[ebp]
; Line 1209
	jne	$column_loop$65020
; Line 1211
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain3@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain3
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?diag5@@YAXPAEHPBEHHHHH@Z PROC				; diag5
; Line 1289
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1290
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 1291
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 1295
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 1299
	mov	esi, DWORD PTR __sp$[ebp]
; Line 1303
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 1305
	sub	esi, ebx
; Line 1306
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 1307
	neg	eax
; Line 1308
	mov	edi, DWORD PTR _dp$[ebp]
; Line 1313
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65032:
; Line 1316
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1317
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	pminub	mm1, mm0
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
; Line 1318
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1319
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1320
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1321
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1322
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	movq	MMWORD PTR [edi], mm6
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1323
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1324
	movq	MMWORD PTR [edi+1], mm1
; Line 1326
	add	esi, 8
; Line 1327
	add	edi, 9
; Line 1328
	mov	ecx, DWORD PTR _hblocks$[ebp]
$middle_loop$65033:
; Line 1338
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1340
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	pminub	mm1, mm0
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
; Line 1341
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1342
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1343
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1344
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1345
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1346
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1347
	add	esi, 8
; Line 1348
	movq	MMWORD PTR [edi], mm1
; Line 1349
	add	edi, 8
; Line 1350
	dec	ecx
; Line 1351
	jne	$middle_loop$65033
; Line 1353
	add	esi, edx
; Line 1354
	add	edi, edx
; Line 1361
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1363
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	pminub	mm1, mm0
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
; Line 1364
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1365
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1366
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1367
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1368
	movq	mm3, MMWORD PTR [esi+ebx]
	movq	mm6, MMWORD PTR [esi+ebx+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	pminub	mm3, mm0
	movq	MMWORD PTR [edi+1], mm6
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
; Line 1369
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1370
	movq	MMWORD PTR [edi], mm1
; Line 1371
	add	esi, eax
; Line 1372
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1373
	dec	DWORD PTR _height$[ebp]
; Line 1378
	jne	$column_loop$65032
; Line 1380
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?diag5@@YAXPAEHPBEHHHHH@Z ENDP				; diag5
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?diag6@@YAXPAEHPBEHHHHH@Z PROC				; diag6
; Line 1448
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1449
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 1450
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 1454
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 1458
	mov	esi, DWORD PTR __sp$[ebp]
; Line 1462
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 1464
	sub	esi, ebx
; Line 1465
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 1466
	neg	eax
; Line 1467
	mov	edi, DWORD PTR _dp$[ebp]
; Line 1472
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65044:
; Line 1475
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1476
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
	paddusb	mm2, mm2
	paddusb	mm2, mm6
; Line 1477
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1478
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1479
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1480
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1481
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	movq	MMWORD PTR [edi], mm6
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1482
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1483
	movq	MMWORD PTR [edi+1], mm1
; Line 1485
	add	esi, 8
; Line 1486
	add	edi, 9
; Line 1487
	mov	ecx, DWORD PTR _hblocks$[ebp]
$middle_loop$65045:
; Line 1497
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1499
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
	paddusb	mm2, mm2
	paddusb	mm2, mm6
; Line 1500
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1501
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1502
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1503
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1504
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1505
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1506
	add	esi, 8
; Line 1507
	movq	MMWORD PTR [edi], mm1
; Line 1508
	add	edi, 8
; Line 1509
	dec	ecx
; Line 1510
	jne	$middle_loop$65045
; Line 1512
	add	esi, edx
; Line 1513
	add	edi, edx
; Line 1520
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1522
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
	paddusb	mm2, mm2
	paddusb	mm2, mm6
; Line 1523
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1524
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1525
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1526
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1527
	movq	mm3, MMWORD PTR [esi+ebx]
	movq	mm6, MMWORD PTR [esi+ebx+2]
	movq	mm4, mm3
	movq	mm7, mm0
	movq	MMWORD PTR [edi+1], mm6
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm4
	paddusb	mm4, mm6
; Line 1528
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1529
	movq	MMWORD PTR [edi], mm1
; Line 1530
	add	esi, eax
; Line 1531
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1532
	dec	DWORD PTR _height$[ebp]
; Line 1537
	jne	$column_loop$65044
; Line 1539
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?diag6@@YAXPAEHPBEHHHHH@Z ENDP				; diag6
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?diag7@@YAXPAEHPBEHHHHH@Z PROC				; diag7
; Line 1604
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1605
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 1606
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 1610
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 1614
	mov	esi, DWORD PTR __sp$[ebp]
; Line 1618
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 1620
	sub	esi, ebx
; Line 1621
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 1622
	neg	eax
; Line 1623
	mov	edi, DWORD PTR _dp$[ebp]
; Line 1628
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65056:
; Line 1631
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1632
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
	paddusb	mm2, mm6
; Line 1633
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1634
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1635
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1636
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1637
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	movq	MMWORD PTR [edi], mm6
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1638
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1639
	movq	MMWORD PTR [edi+1], mm1
; Line 1641
	add	esi, 8
; Line 1642
	add	edi, 9
; Line 1643
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	12
$middle_loop$65057:
; Line 1653
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1655
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
	paddusb	mm2, mm6
; Line 1656
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1657
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1658
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1659
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1660
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1661
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1662
	add	esi, 8
; Line 1663
	movq	MMWORD PTR [edi], mm1
; Line 1664
	add	edi, 8
; Line 1665
	dec	ecx
; Line 1666
	jne	$middle_loop$65057
; Line 1668
	add	esi, edx
; Line 1669
	add	edi, edx
; Line 1676
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1678
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	pmaxub	mm2, mm7
	paddusb	mm2, mm6
; Line 1679
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1680
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1681
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1682
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1683
	movq	mm3, MMWORD PTR [esi+ebx]
	movq	mm6, MMWORD PTR [esi+ebx+2]
	movq	mm4, mm3
	movq	mm7, mm0
	movq	MMWORD PTR [edi+1], mm6
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1684
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1685
	movq	MMWORD PTR [edi], mm1
; Line 1686
	add	esi, eax
; Line 1687
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1688
	dec	DWORD PTR _height$[ebp]
; Line 1693
	jne	$column_loop$65056
; Line 1695
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?diag7@@YAXPAEHPBEHHHHH@Z ENDP				; diag7
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?diag8@@YAXPAEHPBEHHHHH@Z PROC				; diag8
; Line 1763
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1764
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 1765
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 1769
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 1773
	mov	esi, DWORD PTR __sp$[ebp]
; Line 1777
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 1779
	sub	esi, ebx
; Line 1780
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 1781
	neg	eax
; Line 1782
	mov	edi, DWORD PTR _dp$[ebp]
; Line 1787
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65068:
; Line 1790
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1791
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	paddusb	mm6, mm6
	pmaxub	mm2, mm7
	paddusb	mm2, mm6
; Line 1792
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1793
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1794
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1795
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1796
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	movq	MMWORD PTR [edi], mm6
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1797
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1798
	movq	MMWORD PTR [edi+1], mm1
; Line 1800
	add	esi, 8
; Line 1801
	add	edi, 9
; Line 1802
	mov	ecx, DWORD PTR _hblocks$[ebp]
$middle_loop$65069:
; Line 1812
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1814
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	paddusb	mm6, mm6
	pmaxub	mm2, mm7
	paddusb	mm2, mm6
; Line 1815
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1816
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1817
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1818
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1819
	movq	mm3, MMWORD PTR [esi+ebx+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1820
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1821
	add	esi, 8
; Line 1822
	movq	MMWORD PTR [edi], mm1
; Line 1823
	add	edi, 8
; Line 1824
	dec	ecx
; Line 1825
	jne	$middle_loop$65069
; Line 1827
	add	esi, edx
; Line 1828
	add	edi, edx
; Line 1835
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 1837
	movq	mm1, MMWORD PTR [esi]
	movq	mm6, MMWORD PTR [esi+ebx*2+2]
	movq	mm2, mm1
	movq	mm7, mm0
	pmaxub	mm1, mm6
	pminub	mm2, mm6
	psubusb	mm7, mm1
	movq	mm6, mm1
	pminub	mm1, mm0
	psubusb	mm6, mm2
	pmaxub	mm1, mm2
	psubusb	mm2, mm0
	paddusb	mm6, mm6
	pmaxub	mm2, mm7
	paddusb	mm2, mm6
; Line 1838
	movq	mm3, MMWORD PTR [esi+ebx*2]
	movq	mm6, MMWORD PTR [esi+2]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1839
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1840
	movq	mm3, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm7, mm0
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1841
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1842
	movq	mm3, MMWORD PTR [esi+ebx]
	movq	mm6, MMWORD PTR [esi+ebx+2]
	movq	mm4, mm3
	movq	mm7, mm0
	movq	MMWORD PTR [edi+1], mm6
	pmaxub	mm3, mm6
	pminub	mm4, mm6
	psubusb	mm7, mm3
	movq	mm6, mm3
	pminub	mm3, mm0
	psubusb	mm6, mm4
	pmaxub	mm3, mm4
	psubusb	mm4, mm0
	paddusb	mm6, mm6
	pmaxub	mm4, mm7
	paddusb	mm4, mm6
; Line 1843
	pminub	mm2, mm4
	pcmpeqb	mm4, mm2
	psubusb	mm1, mm4
	pand	mm4, mm3
	por	mm1, mm4
; Line 1844
	movq	MMWORD PTR [edi], mm1
; Line 1845
	add	esi, eax
; Line 1846
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1847
	dec	DWORD PTR _height$[ebp]
; Line 1852
	jne	$column_loop$65068
; Line 1854
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?diag8@@YAXPAEHPBEHHHHH@Z ENDP				; diag8
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?diag9@@YAXPAEHPBEHHHHH@Z PROC				; diag9
; Line 1892
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1893
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 1894
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 1898
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 1902
	mov	esi, DWORD PTR __sp$[ebp]
; Line 1906
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 1908
	sub	esi, ebx
; Line 1909
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 1910
	neg	eax
; Line 1911
	mov	edi, DWORD PTR _dp$[ebp]
; Line 1916
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65080:
; Line 1919
	movq	mm0, MMWORD PTR [esi]
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
	movq	mm1, mm0
	pminub	mm0, mm7
	pmaxub	mm1, mm7
	psubusb	mm1, mm0
; Line 1920
	movq	mm2, MMWORD PTR [esi+ebx*2]
	movq	mm7, MMWORD PTR [esi+2]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1921
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1922
	movq	mm2, MMWORD PTR [esi+ebx*2+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1923
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1924
	movq	mm2, MMWORD PTR [esi+ebx+2]
	movq	mm7, MMWORD PTR [esi+ebx]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	movq	MMWORD PTR [edi], mm7
	psubb	mm3, mm2
; Line 1925
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1926
	paddusb	mm1, mm0
; Line 1927
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 1928
	pminub	mm0, mm1
; Line 1929
	movq	MMWORD PTR [edi+1], mm0
; Line 1931
	add	esi, 8
; Line 1932
	add	edi, 9
; Line 1933
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	6
$middle_loop$65081:
; Line 1940
	movq	mm0, MMWORD PTR [esi]
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
	movq	mm1, mm0
	pminub	mm0, mm7
	pmaxub	mm1, mm7
	psubusb	mm1, mm0
; Line 1941
	movq	mm2, MMWORD PTR [esi+ebx*2]
	movq	mm7, MMWORD PTR [esi+2]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1942
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1943
	movq	mm2, MMWORD PTR [esi+ebx*2+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1944
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1945
	movq	mm2, MMWORD PTR [esi+ebx+2]
	movq	mm7, MMWORD PTR [esi+ebx]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1946
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1947
	paddusb	mm1, mm0
; Line 1951
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 1953
	pminub	mm0, mm1
; Line 1954
	add	esi, 8
; Line 1955
	movq	MMWORD PTR [edi], mm0
; Line 1956
	add	edi, 8
; Line 1957
	dec	ecx
; Line 1958
	jne	$middle_loop$65081
; Line 1960
	add	esi, edx
; Line 1961
	add	edi, edx
; Line 1965
	movq	mm0, MMWORD PTR [esi]
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
	movq	mm1, mm0
	pminub	mm0, mm7
	pmaxub	mm1, mm7
	psubusb	mm1, mm0
; Line 1966
	movq	mm2, MMWORD PTR [esi+ebx*2]
	movq	mm7, MMWORD PTR [esi+2]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1967
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1968
	movq	mm2, MMWORD PTR [esi+ebx*2+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 1969
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1970
	movq	mm2, MMWORD PTR [esi+ebx]
	movq	mm7, MMWORD PTR [esi+ebx+2]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	movq	MMWORD PTR [edi+1], mm7
	psubb	mm3, mm2
; Line 1971
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 1972
	paddusb	mm1, mm0
; Line 1976
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 1978
	pminub	mm0, mm1
; Line 1979
	add	esi, eax
; Line 1980
	movq	MMWORD PTR [edi], mm0
; Line 1981
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 1982
	dec	DWORD PTR _height$[ebp]
; Line 1987
	jne	$column_loop$65080
; Line 1989
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?diag9@@YAXPAEHPBEHHHHH@Z ENDP				; diag9
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain10@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain10
; Line 2022
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2023
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 2024
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 2028
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 2032
	mov	esi, DWORD PTR __sp$[ebp]
; Line 2036
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 2038
	sub	esi, ebx
; Line 2039
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 2040
	neg	eax
; Line 2041
	mov	edi, DWORD PTR _dp$[ebp]
; Line 2046
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65092:
; Line 2049
	movq	mm1, MMWORD PTR [esi+ebx+1]
; Line 2050
	movq	mm2, MMWORD PTR [esi+ebx]
	movq	mm3, mm1
	movq	mm7, mm1
	pmaxub	mm3, mm2
	pminub	mm7, mm2
	movd	DWORD PTR [edi], mm2
	psubusb	mm3, mm7
; Line 2051
	movq	mm4, MMWORD PTR [esi+ebx+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2052
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2053
	movq	mm4, MMWORD PTR [esi]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2054
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2055
	movq	mm4, MMWORD PTR [esi+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2056
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2057
	movq	mm4, MMWORD PTR [esi+1]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2058
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2059
	movq	mm4, MMWORD PTR [esi+ebx*2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2060
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2061
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2062
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2063
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2064
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2065
	movq	mm4, mm2
; Line 2066
	pminub	mm1, mm2
; Line 2067
	pmaxub	mm1, mm4
; Line 2068
	movq	MMWORD PTR [edi+1], mm1
; Line 2070
	add	esi, 8
; Line 2071
	add	edi, 9
; Line 2072
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	15
$middle_loop$65093:
; Line 2079
	movq	mm1, MMWORD PTR [esi+ebx+1]
; Line 2081
	movq	mm2, MMWORD PTR [esi+ebx]
	movq	mm3, mm1
	movq	mm7, mm1
	pmaxub	mm3, mm2
	pminub	mm7, mm2
	psubusb	mm3, mm7
; Line 2086
	movq	mm4, MMWORD PTR [esi+ebx+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	movq	MMWORD PTR [edi+1], mm4
	psubusb	mm5, mm7
; Line 2087
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2088
	movq	mm4, MMWORD PTR [esi]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2089
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2090
	movq	mm4, MMWORD PTR [esi+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2091
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2092
	movq	mm4, MMWORD PTR [esi+1]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2093
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2094
	movq	mm4, MMWORD PTR [esi+ebx*2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2095
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2096
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2097
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2098
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2099
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2100
	movq	mm4, mm2
; Line 2101
	pminub	mm1, mm2
; Line 2102
	add	esi, 8
; Line 2103
	pmaxub	mm1, mm4
; Line 2104
	movq	MMWORD PTR [edi], mm1
; Line 2105
	add	edi, 8
; Line 2106
	dec	ecx
; Line 2107
	jne	$middle_loop$65093
; Line 2109
	add	esi, edx
; Line 2110
	add	edi, edx
; Line 2114
	movq	mm1, MMWORD PTR [esi+ebx+1]
; Line 2116
	movq	mm2, MMWORD PTR [esi+ebx]
	movq	mm3, mm1
	movq	mm7, mm1
	pmaxub	mm3, mm2
	pminub	mm7, mm2
	psubusb	mm3, mm7
; Line 2121
	movq	mm4, MMWORD PTR [esi+ebx+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2122
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2123
	movq	mm4, MMWORD PTR [esi]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2124
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2125
	movq	mm4, MMWORD PTR [esi+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2126
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2127
	movq	mm4, MMWORD PTR [esi+1]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2128
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2129
	movq	mm4, MMWORD PTR [esi+ebx*2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2130
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2131
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2132
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2133
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	movq	mm5, mm1
	movq	mm7, mm1
	pmaxub	mm5, mm4
	pminub	mm7, mm4
	psubusb	mm5, mm7
; Line 2134
	pminub	mm3, mm5
	pcmpeqb	mm5, mm3
	psubusb	mm2, mm5
	pand	mm5, mm4
	por	mm2, mm5
; Line 2135
	movq	mm4, mm2
; Line 2136
	pminub	mm1, mm2
; Line 2137
	pmaxub	mm1, mm4
; Line 2138
	add	esi, eax
; Line 2139
	movq	MMWORD PTR [edi], mm1
; Line 2140
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 2141
	dec	DWORD PTR _height$[ebp]
; Line 2146
	jne	$column_loop$65092
; Line 2148
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain10@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain10
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain11@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain11
; Line 2356
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2377
	movq	mm7, MMWORD PTR _convolution_bias
; Line 2378
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 2379
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 2380
	pxor	mm6, mm6
; Line 2384
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 2388
	mov	esi, DWORD PTR __sp$[ebp]
; Line 2392
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 2394
	sub	esi, ebx
; Line 2395
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 2396
	neg	eax
; Line 2397
	mov	edi, DWORD PTR _dp$[ebp]
; Line 2402
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	2
$column_loop$65105:
; Line 2405
	movq	mm0, MMWORD PTR [esi+ebx+1]
	movq	mm1, mm0
	punpcklbw mm0, mm6
	punpckhbw mm1, mm6
	movq	mm2, MMWORD PTR [esi+ebx]
	paddusw	mm0, mm0
	movq	mm3, mm2
	movd	DWORD PTR [edi], mm2
	paddusw	mm1, mm1
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi+1]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	paddusw	mm0, mm0
	paddusw	mm1, mm1
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi+ebx*2]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	paddusw	mm0, mm4
	paddusw	mm1, mm5
	paddusw	mm0, mm7
	paddusw	mm1, mm7
	psraw	mm0, 4
	psraw	mm1, 4
	packuswb mm0, mm1
	movq	MMWORD PTR [edi+1], mm0
; Line 2407
	add	esi, 8
; Line 2408
	add	edi, 9
; Line 2409
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	11
$middle_loop$65106:
; Line 2413
	movq	mm0, MMWORD PTR [esi+ebx+1]
	movq	mm1, mm0
	punpcklbw mm0, mm6
	punpckhbw mm1, mm6
	movq	mm2, MMWORD PTR [esi+ebx]
	paddusw	mm0, mm0
	movq	mm3, mm2
	paddusw	mm1, mm1
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi+1]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	paddusw	mm0, mm0
	paddusw	mm1, mm1
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi+ebx*2]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	paddusw	mm0, mm4
	paddusw	mm1, mm5
	paddusw	mm0, mm7
	paddusw	mm1, mm7
	psraw	mm0, 4
	psraw	mm1, 4
	packuswb mm0, mm1
	movq	MMWORD PTR [edi], mm0
; Line 2414
	add	esi, 8
; Line 2415
	add	edi, 8
; Line 2416
	dec	ecx
; Line 2417
	jne	$middle_loop$65106
; Line 2419
	add	esi, edx
; Line 2420
	add	edi, edx
; Line 2421
	movq	mm0, MMWORD PTR [esi+ebx+1]
	movq	mm1, mm0
	punpcklbw mm0, mm6
	punpckhbw mm1, mm6
	movq	mm2, MMWORD PTR [esi+ebx]
	paddusw	mm0, mm0
	movq	mm3, mm2
	paddusw	mm1, mm1
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	movq	MMWORD PTR [edi+1], mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi+1]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	paddusw	mm0, mm0
	paddusw	mm1, mm1
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	movq	mm2, MMWORD PTR [esi+ebx*2]
	paddusw	mm0, mm4
	movq	mm3, mm2
	paddusw	mm1, mm5
	punpcklbw mm2, mm6
	punpckhbw mm3, mm6
	movq	mm4, MMWORD PTR [esi+ebx*2+2]
	paddusw	mm0, mm2
	movq	mm5, mm4
	paddusw	mm1, mm3
	punpcklbw mm4, mm6
	punpckhbw mm5, mm6
	paddusw	mm0, mm4
	paddusw	mm1, mm5
	paddusw	mm0, mm7
	paddusw	mm1, mm7
	psraw	mm0, 4
	psraw	mm1, 4
	packuswb mm0, mm1
	movq	MMWORD PTR [edi], mm0
; Line 2422
	add	esi, eax
; Line 2423
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 2424
	dec	DWORD PTR _height$[ebp]
; Line 2429
	jne	$column_loop$65105
; Line 2432
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain11@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain11
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_RemoveGrain12@@YAXPAEHPBEHHHHH@Z PROC		; SSE_RemoveGrain12
; Line 2490
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2511
	movq	mm7, MMWORD PTR _fconvolution_bias
; Line 2512
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 2513
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 2514
	pxor	mm6, mm6
; Line 2518
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 2522
	mov	esi, DWORD PTR __sp$[ebp]
; Line 2526
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 2528
	sub	esi, ebx
; Line 2529
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 2530
	neg	eax
; Line 2531
	mov	edi, DWORD PTR _dp$[ebp]
; Line 2536
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	2
$column_loop$65118:
; Line 2539
	movq	mm1, MMWORD PTR [esi]
	movq	mm2, MMWORD PTR [esi+ebx*2]
	pavgb	mm1, MMWORD PTR [esi+2]
	pavgb	mm2, MMWORD PTR [esi+ebx*2+2]
	movq	mm3, MMWORD PTR [esi+ebx]
	pavgb	mm1, MMWORD PTR [esi+1]
	movd	DWORD PTR [edi], mm3
	pavgb	mm2, MMWORD PTR [esi+ebx*2+1]
	pavgb	mm3, MMWORD PTR [esi+ebx+2]
	pavgb	mm1, mm2
	pavgb	mm3, MMWORD PTR [esi+ebx+1]
	psubusb	mm1, mm7
	pavgb	mm1, mm3
	movq	MMWORD PTR [edi+1], mm1
; Line 2541
	add	esi, 8
; Line 2542
	add	edi, 9
; Line 2543
	mov	ecx, DWORD PTR _hblocks$[ebp]
$middle_loop$65119:
; Line 2547
	movq	mm1, MMWORD PTR [esi]
	movq	mm2, MMWORD PTR [esi+ebx*2]
	pavgb	mm1, MMWORD PTR [esi+2]
	pavgb	mm2, MMWORD PTR [esi+ebx*2+2]
	movq	mm3, MMWORD PTR [esi+ebx]
	pavgb	mm1, MMWORD PTR [esi+1]
	pavgb	mm2, MMWORD PTR [esi+ebx*2+1]
	pavgb	mm3, MMWORD PTR [esi+ebx+2]
	pavgb	mm1, mm2
	pavgb	mm3, MMWORD PTR [esi+ebx+1]
	psubusb	mm1, mm7
	pavgb	mm1, mm3
	movq	MMWORD PTR [edi], mm1
; Line 2548
	add	esi, 8
; Line 2549
	add	edi, 8
; Line 2550
	dec	ecx
; Line 2551
	jne	SHORT $middle_loop$65119
; Line 2553
	add	esi, edx
; Line 2554
	add	edi, edx
; Line 2555
	movq	mm1, MMWORD PTR [esi]
	movq	mm2, MMWORD PTR [esi+ebx*2]
	pavgb	mm1, MMWORD PTR [esi+2]
	pavgb	mm2, MMWORD PTR [esi+ebx*2+2]
	movq	mm3, MMWORD PTR [esi+ebx+2]
	pavgb	mm1, MMWORD PTR [esi+1]
	movq	MMWORD PTR [edi+1], mm3
	pavgb	mm2, MMWORD PTR [esi+ebx*2+1]
	pavgb	mm3, MMWORD PTR [esi+ebx]
	pavgb	mm1, mm2
	pavgb	mm3, MMWORD PTR [esi+ebx+1]
	psubusb	mm1, mm7
	pavgb	mm1, mm3
	movq	MMWORD PTR [edi], mm1
; Line 2556
	add	esi, eax
; Line 2557
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 2558
	dec	DWORD PTR _height$[ebp]
; Line 2563
	jne	$column_loop$65118
; Line 2566
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_RemoveGrain12@@YAXPAEHPBEHHHHH@Z ENDP		; SSE_RemoveGrain12
_TEXT	ENDS
PUBLIC	?WeirdBob@@YAXPAEHPBEHHHHH@Z			; WeirdBob
; Function compile flags: /Odtp
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?WeirdBob@@YAXPAEHPBEHHHHH@Z PROC			; WeirdBob
; Line 2578
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2641
	mov	ecx, DWORD PTR _incpitch$[ebp]
; Line 2642
	mov	eax, DWORD PTR _dpitch$[ebp]
; Line 2643
	lea	ebx, DWORD PTR [ecx+eax*2]
; Line 2644
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 2645
	mov	DWORD PTR _dpitch$[ebp], ebx
; Line 2646
	mov	esi, DWORD PTR __sp$[ebp]
; Line 2647
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 2648
	mov	edi, DWORD PTR _dp$[ebp]
; Line 2649
	sub	esi, ebx
; Line 2650
	add	ebx, ebx
; Line 2651
	add	ecx, ebx
; Line 2652
	mov	DWORD PTR _spitch$[ebp], ecx
; Line 2653
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	6
$column_loop$65130:
; Line 2656
	movq	mm0, MMWORD PTR [esi+ebx+2]
	movq	mm7, MMWORD PTR [esi]
	movq	mm1, mm0
	pminub	mm0, mm7
	pmaxub	mm1, mm7
	psubusb	mm1, mm0
; Line 2657
	movq	mm2, MMWORD PTR [esi+2]
	movq	mm6, MMWORD PTR [esi+ebx]
	movq	mm3, mm2
	pminub	mm2, mm6
	pmaxub	mm3, mm6
	movq	MMWORD PTR [edi+eax], mm6
	psubb	mm3, mm2
; Line 2658
	pavgb	mm6, mm7
; Line 2659
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 2660
	movd	DWORD PTR [edi], mm6
; Line 2661
	movq	mm2, MMWORD PTR [esi+ebx+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 2662
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 2663
	paddusb	mm1, mm0
; Line 2664
	pavgb	mm0, mm1
; Line 2665
	movq	MMWORD PTR [edi+1], mm0
; Line 2667
	add	esi, 8
; Line 2668
	mov	ecx, DWORD PTR _hblocks$[ebp]
; Line 2669
	add	edi, 8
	npad	8
$middle_loop$65131:
; Line 2672
	movq	mm0, MMWORD PTR [esi]
	movq	mm7, MMWORD PTR [esi+ebx+2]
	movq	mm1, mm0
	pminub	mm0, mm7
	pmaxub	mm1, mm7
	psubusb	mm1, mm0
; Line 2673
	movq	mm2, MMWORD PTR [esi+2]
	movq	mm7, MMWORD PTR [esi+ebx]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	movq	MMWORD PTR [edi+eax], mm7
	psubb	mm3, mm2
; Line 2674
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 2675
	movq	mm2, MMWORD PTR [esi+1]
	movq	mm7, MMWORD PTR [esi+ebx+1]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 2676
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 2677
	paddusb	mm1, mm0
; Line 2678
	pavgb	mm0, mm1
; Line 2679
	add	esi, 8
; Line 2680
	movq	MMWORD PTR [edi+1], mm0
; Line 2681
	add	edi, 8
; Line 2682
	dec	ecx
; Line 2683
	jne	SHORT $middle_loop$65131
; Line 2685
	add	esi, edx
; Line 2686
	add	edi, edx
; Line 2687
	movq	mm0, MMWORD PTR [esi]
	movq	mm7, MMWORD PTR [esi+ebx+2]
	movq	mm1, mm0
	pminub	mm0, mm7
	pmaxub	mm1, mm7
	movq	MMWORD PTR [edi+eax+2], mm7
	psubb	mm1, mm0
; Line 2688
	movq	mm2, MMWORD PTR [esi+ebx]
	movq	mm6, MMWORD PTR [esi+2]
	movd	DWORD PTR [edi+eax], mm2
	movq	mm3, mm2
	pminub	mm2, mm6
	pmaxub	mm3, mm6
	psubusb	mm3, mm2
; Line 2689
	pavgb	mm6, mm7
; Line 2690
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 2691
	movq	MMWORD PTR [edi+2], mm6
; Line 2692
	movq	mm2, MMWORD PTR [esi+ebx+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm3, mm2
	pminub	mm2, mm7
	pmaxub	mm3, mm7
	psubusb	mm3, mm2
; Line 2693
	pminub	mm1, mm3
	pcmpeqb	mm3, mm1
	psubusb	mm0, mm3
	pand	mm3, mm2
	por	mm0, mm3
; Line 2694
	paddusb	mm1, mm0
; Line 2695
	pavgb	mm0, mm1
; Line 2696
	add	esi, DWORD PTR _spitch$[ebp]
; Line 2697
	movq	MMWORD PTR [edi+1], mm0
; Line 2698
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 2699
	dec	DWORD PTR _height$[ebp]
; Line 2700
	jne	$column_loop$65130
; Line 2702
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?WeirdBob@@YAXPAEHPBEHHHHH@Z ENDP			; WeirdBob
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?bob_top@@YAXPAEHPBEHHHHH@Z PROC			; bob_top
; Line 2706
	push	ebp
	mov	ebp, esp
; Line 2707
	mov	eax, DWORD PTR _hblocks$[ebp]
	mov	ecx, DWORD PTR _remainder$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+18]
	push	edx
	mov	eax, DWORD PTR __sp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2708
	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _incpitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _remainder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hblocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _spitch$[ebp]
	push	edx
	mov	eax, DWORD PTR __sp$[ebp]
	add	eax, DWORD PTR _spitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dpitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	add	edx, DWORD PTR _dpitch$[ebp]
	push	edx
	call	?WeirdBob@@YAXPAEHPBEHHHHH@Z		; WeirdBob
	add	esp, 32					; 00000020H
; Line 2709
	pop	ebp
	ret	0
?bob_top@@YAXPAEHPBEHHHHH@Z ENDP			; bob_top
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?bob_bottom@@YAXPAEHPBEHHHHH@Z PROC			; bob_bottom
; Line 2712
	push	ebp
	mov	ebp, esp
; Line 2713
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _incpitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remainder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hblocks$[ebp]
	push	edx
	mov	eax, DWORD PTR _spitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __sp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dpitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	call	?WeirdBob@@YAXPAEHPBEHHHHH@Z		; WeirdBob
	add	esp, 32					; 00000020H
; Line 2714
	pop	ebp
	ret	0
?bob_bottom@@YAXPAEHPBEHHHHH@Z ENDP			; bob_bottom
_TEXT	ENDS
PUBLIC	?SmartBob@@YAXPAEHPBEHHHHH@Z			; SmartBob
; Function compile flags: /Odtp
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SmartBob@@YAXPAEHPBEHHHHH@Z PROC			; SmartBob
; Line 2727
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2847
	mov	ecx, DWORD PTR _incpitch$[ebp]
; Line 2848
	mov	eax, DWORD PTR _dpitch$[ebp]
; Line 2849
	lea	ebx, DWORD PTR [ecx+eax*2]
; Line 2850
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 2851
	mov	DWORD PTR _dpitch$[ebp], ebx
; Line 2852
	mov	esi, DWORD PTR __sp$[ebp]
; Line 2853
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 2854
	mov	edi, DWORD PTR _dp$[ebp]
; Line 2855
	sub	esi, ebx
; Line 2856
	add	ebx, ebx
; Line 2858
	movq	mm6, MMWORD PTR _fconvolution_bias
; Line 2859
	add	ecx, ebx
; Line 2860
	mov	DWORD PTR _spitch$[ebp], ecx
; Line 2861
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	15
$column_loop$65162:
; Line 2864
	movq	mm0, MMWORD PTR [esi+ebx+2]
	movq	mm7, MMWORD PTR [esi]
	movq	mm1, mm0
	movq	mm2, mm0
	pmaxub	mm1, mm7
	pminub	mm0, mm7
	pavgb	mm2, mm7
	psubusb	mm1, mm0
; Line 2865
	movq	mm4, MMWORD PTR [esi+ebx]
; Line 2866
	movq	mm5, MMWORD PTR [esi+2]
; Line 2867
	pavgb	mm7, mm4
; Line 2868
	movq	mm3, mm4
; Line 2869
	movd	DWORD PTR [edi], mm7
; Line 2870
	movq	mm7, mm4
; Line 2871
	pminub	mm3, mm5
; Line 2872
	movq	MMWORD PTR [edi+eax], mm7
; Line 2873
	pmaxub	mm4, mm5
; Line 2874
	pavgb	mm5, mm7
; Line 2875
	psubusb	mm4, mm3
; Line 2876
	pavgb	mm2, mm5
; Line 2877
	pminub	mm1, mm4
	pcmpeqb	mm4, mm1
	psubusb	mm0, mm4
	pand	mm4, mm3
	por	mm0, mm4
; Line 2878
	psubusb	mm2, mm6
; Line 2879
	movq	mm3, MMWORD PTR [esi+ebx+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm5, mm3
	pmaxub	mm4, mm7
	pminub	mm3, mm7
	pavgb	mm5, mm7
	psubusb	mm4, mm3
; Line 2880
	pavgb	mm2, mm5
; Line 2881
	pminub	mm1, mm4
	pcmpeqb	mm4, mm1
	psubusb	mm0, mm4
	pand	mm4, mm3
	por	mm0, mm4
; Line 2882
	pmaxub	mm2, mm0
; Line 2883
	paddusb	mm1, mm0
; Line 2884
	pminub	mm2, mm1
; Line 2885
	movq	MMWORD PTR [edi+1], mm2
; Line 2887
	add	esi, 8
; Line 2888
	mov	ecx, DWORD PTR _hblocks$[ebp]
; Line 2889
	add	edi, 8
	npad	10
$middle_loop$65163:
; Line 2892
	movq	mm0, MMWORD PTR [esi+ebx+2]
	movq	mm7, MMWORD PTR [esi]
	movq	mm1, mm0
	movq	mm2, mm0
	pmaxub	mm1, mm7
	pminub	mm0, mm7
	pavgb	mm2, mm7
	psubusb	mm1, mm0
; Line 2893
	movq	mm3, MMWORD PTR [esi+2]
	movq	mm7, MMWORD PTR [esi+ebx]
	movq	mm4, mm3
	movq	mm5, mm3
	pmaxub	mm4, mm7
	pminub	mm3, mm7
	pavgb	mm5, mm7
	psubusb	mm4, mm3
; Line 2894
	movq	MMWORD PTR [edi+eax], mm7
; Line 2895
	pavgb	mm2, mm5
; Line 2896
	pminub	mm1, mm4
	pcmpeqb	mm4, mm1
	psubusb	mm0, mm4
	pand	mm4, mm3
	por	mm0, mm4
; Line 2897
	psubusb	mm2, mm6
; Line 2898
	movq	mm3, MMWORD PTR [esi+1]
	movq	mm7, MMWORD PTR [esi+ebx+1]
	movq	mm4, mm3
	movq	mm5, mm3
	pmaxub	mm4, mm7
	pminub	mm3, mm7
	pavgb	mm5, mm7
	psubusb	mm4, mm3
; Line 2899
	pavgb	mm2, mm5
; Line 2900
	pminub	mm1, mm4
	pcmpeqb	mm4, mm1
	psubusb	mm0, mm4
	pand	mm4, mm3
	por	mm0, mm4
; Line 2901
	pmaxub	mm2, mm0
; Line 2902
	paddusb	mm1, mm0
; Line 2903
	pminub	mm2, mm1
; Line 2904
	add	esi, 8
; Line 2905
	movq	MMWORD PTR [edi+1], mm2
; Line 2906
	add	edi, 8
; Line 2907
	dec	ecx
; Line 2908
	jne	$middle_loop$65163
; Line 2910
	add	esi, edx
; Line 2911
	add	edi, edx
; Line 2912
	movq	mm0, MMWORD PTR [esi]
	movq	mm7, MMWORD PTR [esi+ebx+2]
	movq	mm1, mm0
	movq	mm2, mm0
	pmaxub	mm1, mm7
	pminub	mm0, mm7
	pavgb	mm2, mm7
	psubusb	mm1, mm0
; Line 2913
	movq	MMWORD PTR [edi+eax+2], mm7
; Line 2914
	movq	mm4, MMWORD PTR [esi+2]
; Line 2915
	movq	mm5, MMWORD PTR [esi+ebx]
; Line 2916
	pavgb	mm7, mm4
; Line 2917
	movq	mm3, mm4
; Line 2918
	movq	MMWORD PTR [edi+2], mm7
; Line 2919
	movq	mm7, mm4
; Line 2920
	pminub	mm3, mm5
; Line 2921
	movd	DWORD PTR [edi+eax], mm5
; Line 2922
	pmaxub	mm4, mm5
; Line 2923
	pavgb	mm5, mm7
; Line 2924
	psubusb	mm4, mm3
; Line 2925
	pavgb	mm2, mm5
; Line 2926
	pminub	mm1, mm4
	pcmpeqb	mm4, mm1
	psubusb	mm0, mm4
	pand	mm4, mm3
	por	mm0, mm4
; Line 2927
	psubusb	mm2, mm6
; Line 2928
	movq	mm3, MMWORD PTR [esi+ebx+1]
	movq	mm7, MMWORD PTR [esi+1]
	movq	mm4, mm3
	movq	mm5, mm3
	pmaxub	mm4, mm7
	pminub	mm3, mm7
	pavgb	mm5, mm7
	psubusb	mm4, mm3
; Line 2929
	pavgb	mm2, mm5
; Line 2930
	pminub	mm1, mm4
	pcmpeqb	mm4, mm1
	psubusb	mm0, mm4
	pand	mm4, mm3
	por	mm0, mm4
; Line 2931
	pmaxub	mm2, mm0
; Line 2932
	paddusb	mm1, mm0
; Line 2933
	pminub	mm2, mm1
; Line 2934
	add	esi, DWORD PTR _spitch$[ebp]
; Line 2935
	movq	MMWORD PTR [edi+1], mm2
; Line 2936
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 2937
	dec	DWORD PTR _height$[ebp]
; Line 2938
	jne	$column_loop$65162
; Line 2940
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SmartBob@@YAXPAEHPBEHHHHH@Z ENDP			; SmartBob
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?smartbob_top@@YAXPAEHPBEHHHHH@Z PROC			; smartbob_top
; Line 2943
	push	ebp
	mov	ebp, esp
; Line 2944
	mov	eax, DWORD PTR _hblocks$[ebp]
	mov	ecx, DWORD PTR _remainder$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+18]
	push	edx
	mov	eax, DWORD PTR __sp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2945
	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _incpitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _remainder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hblocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _spitch$[ebp]
	push	edx
	mov	eax, DWORD PTR __sp$[ebp]
	add	eax, DWORD PTR _spitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dpitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	add	edx, DWORD PTR _dpitch$[ebp]
	push	edx
	call	?SmartBob@@YAXPAEHPBEHHHHH@Z		; SmartBob
	add	esp, 32					; 00000020H
; Line 2946
	pop	ebp
	ret	0
?smartbob_top@@YAXPAEHPBEHHHHH@Z ENDP			; smartbob_top
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?smartbob_bottom@@YAXPAEHPBEHHHHH@Z PROC		; smartbob_bottom
; Line 2949
	push	ebp
	mov	ebp, esp
; Line 2950
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _incpitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remainder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hblocks$[ebp]
	push	edx
	mov	eax, DWORD PTR _spitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __sp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dpitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	call	?SmartBob@@YAXPAEHPBEHHHHH@Z		; SmartBob
	add	esp, 32					; 00000020H
; Line 2951
	pop	ebp
	ret	0
?smartbob_bottom@@YAXPAEHPBEHHHHH@Z ENDP		; smartbob_bottom
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SmartRG@@YAXPAEHPBEHHHHH@Z PROC			; SmartRG
; Line 2956
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 2957
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 2958
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 2962
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 2966
	mov	esi, DWORD PTR __sp$[ebp]
; Line 2970
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 2972
	sub	esi, ebx
; Line 2973
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 2974
	neg	eax
; Line 2975
	mov	edi, DWORD PTR _dp$[ebp]
; Line 2980
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65194:
; Line 2983
	movq	mm0, MMWORD PTR [esi]
; Line 2984
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
; Line 2985
	movq	mm1, mm0
; Line 2986
	pminub	mm0, mm7
; Line 2987
	pmaxub	mm1, mm7
; Line 2988
	movq	mm4, MMWORD PTR [esi+2]
; Line 2989
	movq	mm7, MMWORD PTR [esi+ebx*2]
; Line 2990
	movq	mm5, mm4
; Line 2991
	movq	mm2, MMWORD PTR [esi+1]
; Line 2992
	pminub	mm4, mm7
; Line 2993
	pmaxub	mm5, mm7
; Line 2994
	pmaxub	mm0, mm4
; Line 2995
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 2996
	movq	mm3, mm2
; Line 2997
	pminub	mm1, mm5
; Line 2999
	pminub	mm2, mm7
; Line 3000
	movq	mm4, MMWORD PTR [esi+ebx]
; Line 3001
	pmaxub	mm3, mm7
; Line 3002
	movd	DWORD PTR [edi], mm4
; Line 3003
	pmaxub	mm0, mm2
; Line 3004
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 3005
	movq	mm5, mm4
; Line 3006
	pminub	mm1, mm3
; Line 3008
	pminub	mm4, mm7
; Line 3009
	pmaxub	mm5, mm7
; Line 3010
	pmaxub	mm0, mm4
; Line 3011
	pminub	mm1, mm5
; Line 3012
	movq	mm2, mm0
; Line 3016
	pminub	mm0, mm1
; Line 3017
	pmaxub	mm2, mm1
; Line 3021
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 3023
	pminub	mm0, mm2
; Line 3024
	movq	MMWORD PTR [edi+1], mm0
; Line 3026
	add	esi, 8
; Line 3027
	add	edi, 9
; Line 3028
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	7
$middle_loop$65195:
; Line 3032
	movq	mm0, MMWORD PTR [esi]
; Line 3033
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
; Line 3034
	movq	mm1, mm0
; Line 3035
	movq	mm4, MMWORD PTR [esi+2]
; Line 3036
	pminub	mm0, mm7
; Line 3037
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 3038
	movq	mm5, mm4
; Line 3039
	pmaxub	mm1, mm7
; Line 3040
	pminub	mm4, mm6
; Line 3041
	movq	mm2, MMWORD PTR [esi+1]
; Line 3042
	pmaxub	mm5, mm6
; Line 3043
	pmaxub	mm0, mm4
; Line 3044
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 3045
	movq	mm3, mm2
; Line 3046
	pminub	mm1, mm5
; Line 3048
	pminub	mm2, mm7
; Line 3049
	movq	mm4, MMWORD PTR [esi+ebx]
; Line 3050
	pmaxub	mm3, mm7
; Line 3051
	pmaxub	mm0, mm2
; Line 3052
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 3053
	movq	mm5, mm4
; Line 3054
	pminub	mm1, mm3
; Line 3056
	pminub	mm4, mm7
; Line 3057
	pmaxub	mm5, mm7
; Line 3058
	pmaxub	mm0, mm4
; Line 3059
	pminub	mm1, mm5
; Line 3060
	movq	mm2, mm0
; Line 3073
	pminub	mm0, mm1
; Line 3074
	pmaxub	mm2, mm1
; Line 3083
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 3085
	pminub	mm0, mm2
; Line 3086
	add	esi, 8
; Line 3087
	movq	MMWORD PTR [edi], mm0
; Line 3088
	add	edi, 8
; Line 3089
	dec	ecx
; Line 3090
	jne	SHORT $middle_loop$65195
; Line 3092
	add	esi, edx
; Line 3093
	movq	mm0, MMWORD PTR [esi]
; Line 3094
	add	edi, edx
; Line 3095
	movq	mm7, MMWORD PTR [esi+ebx*2+2]
; Line 3096
	movq	mm1, mm0
; Line 3097
	movq	mm4, MMWORD PTR [esi+2]
; Line 3098
	pminub	mm0, mm7
; Line 3099
	pmaxub	mm1, mm7
; Line 3100
	movq	mm6, MMWORD PTR [esi+ebx*2]
; Line 3101
	movq	mm5, mm4
; Line 3102
	movq	mm2, MMWORD PTR [esi+1]
; Line 3103
	pminub	mm4, mm6
; Line 3104
	pmaxub	mm5, mm6
; Line 3105
	pmaxub	mm0, mm4
; Line 3106
	movq	mm7, MMWORD PTR [esi+ebx*2+1]
; Line 3107
	movq	mm3, mm2
; Line 3108
	pminub	mm1, mm5
; Line 3110
	pminub	mm2, mm7
; Line 3111
	movq	mm4, MMWORD PTR [esi+ebx]
; Line 3112
	pmaxub	mm3, mm7
; Line 3113
	pmaxub	mm0, mm2
; Line 3114
	movq	mm7, MMWORD PTR [esi+ebx+2]
; Line 3115
	movq	mm5, mm4
; Line 3117
	movq	MMWORD PTR [edi+1], mm7
; Line 3119
	pminub	mm1, mm3
; Line 3121
	pminub	mm4, mm7
; Line 3122
	pmaxub	mm5, mm7
; Line 3123
	pmaxub	mm0, mm4
; Line 3124
	pminub	mm1, mm5
; Line 3125
	movq	mm2, mm0
; Line 3138
	pminub	mm0, mm1
; Line 3139
	pmaxub	mm2, mm1
; Line 3148
	pmaxub	mm0, MMWORD PTR [esi+ebx+1]
; Line 3150
	pminub	mm0, mm2
; Line 3151
	add	esi, eax
; Line 3152
	movq	MMWORD PTR [edi], mm0
; Line 3153
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 3154
	dec	DWORD PTR _height$[ebp]
; Line 3159
	jne	$column_loop$65194
; Line 3161
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SmartRG@@YAXPAEHPBEHHHHH@Z ENDP			; SmartRG
; Function compile flags: /Odtp
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_hblocks$ = 24						; size = 4
_remainder$ = 28					; size = 4
_incpitch$ = 32						; size = 4
_height$ = 36						; size = 4
?SSE_Repair18@@YAXPAEHPBEHHHHH@Z PROC			; SSE_Repair18
; Line 3970
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 3971
	mov	eax, DWORD PTR _hblocks$[ebp]
; Line 3972
	mov	ebx, DWORD PTR _spitch$[ebp]
; Line 3976
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 3980
	mov	esi, DWORD PTR __sp$[ebp]
; Line 3984
	lea	eax, DWORD PTR [edx+eax*8+9]
; Line 3986
	sub	esi, ebx
; Line 3987
	sub	DWORD PTR _dpitch$[ebp], eax
; Line 3988
	neg	eax
; Line 3989
	mov	edi, DWORD PTR _dp$[ebp]
; Line 3994
	lea	eax, DWORD PTR [ebx+eax+1]
	npad	12
$column_loop$65206:
; Line 3997
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 3998
	movq	mm1, MMWORD PTR [esi]
	movq	mm3, mm0
	movq	mm7, mm1
	psubusb	mm3, mm1
	psubusb	mm7, mm0
	movq	mm2, MMWORD PTR [esi+ebx*2+2]
	pmaxub	mm3, mm7
	movq	mm7, mm0
	psubusb	mm7, mm2
	pmaxub	mm3, mm7
	movq	mm7, mm2
	psubusb	mm7, mm0
	pmaxub	mm3, mm7
; Line 3999
	movq	mm4, MMWORD PTR [esi+ebx*2]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+2]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4000
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4001
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+1]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4002
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4003
	movq	mm4, MMWORD PTR [esi+ebx+2]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+ebx]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4004
	movd	DWORD PTR [edi], mm5
; Line 4005
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4006
	movq	mm7, mm1
; Line 4007
	pminub	mm1, mm2
; Line 4008
	pmaxub	mm7, mm2
; Line 4009
	pmaxub	mm1, mm0
; Line 4010
	pminub	mm1, mm7
; Line 4011
	movq	MMWORD PTR [edi+1], mm1
; Line 4013
	add	esi, 8
; Line 4014
	add	edi, 9
; Line 4015
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	14
$middle_loop$65207:
; Line 4019
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 4020
	movq	mm1, MMWORD PTR [esi]
	movq	mm3, mm0
	movq	mm7, mm1
	psubusb	mm3, mm1
	psubusb	mm7, mm0
	movq	mm2, MMWORD PTR [esi+ebx*2+2]
	pmaxub	mm3, mm7
	movq	mm7, mm0
	psubusb	mm7, mm2
	pmaxub	mm3, mm7
	movq	mm7, mm2
	psubusb	mm7, mm0
	pmaxub	mm3, mm7
; Line 4021
	movq	mm4, MMWORD PTR [esi+ebx*2]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+2]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4022
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4023
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+1]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4024
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4025
	movq	mm4, MMWORD PTR [esi+ebx+2]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+ebx]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4026
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4027
	add	esi, 8
; Line 4028
	movq	mm6, mm1
; Line 4045
	pminub	mm1, mm2
; Line 4046
	pmaxub	mm6, mm2
; Line 4047
	pmaxub	mm1, mm0
; Line 4049
	pminub	mm1, mm6
; Line 4050
	movq	MMWORD PTR [edi], mm1
; Line 4051
	add	edi, 8
; Line 4052
	dec	ecx
; Line 4053
	jne	$middle_loop$65207
; Line 4055
	add	esi, edx
; Line 4056
	add	edi, edx
; Line 4057
	movq	mm0, MMWORD PTR [esi+ebx+1]
; Line 4058
	movq	mm1, MMWORD PTR [esi]
	movq	mm3, mm0
	movq	mm7, mm1
	psubusb	mm3, mm1
	psubusb	mm7, mm0
	movq	mm2, MMWORD PTR [esi+ebx*2+2]
	pmaxub	mm3, mm7
	movq	mm7, mm0
	psubusb	mm7, mm2
	pmaxub	mm3, mm7
	movq	mm7, mm2
	psubusb	mm7, mm0
	pmaxub	mm3, mm7
; Line 4059
	movq	mm4, MMWORD PTR [esi+ebx*2]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+2]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4060
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4061
	movq	mm4, MMWORD PTR [esi+ebx*2+1]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+1]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4062
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4063
	movq	mm4, MMWORD PTR [esi+ebx]
	movq	mm6, mm0
	movq	mm7, mm4
	psubusb	mm6, mm4
	psubusb	mm7, mm0
	movq	mm5, MMWORD PTR [esi+ebx+2]
	pmaxub	mm6, mm7
	movq	mm7, mm0
	psubusb	mm7, mm5
	pmaxub	mm6, mm7
	movq	mm7, mm5
	psubusb	mm7, mm0
	pmaxub	mm6, mm7
; Line 4065
	movq	MMWORD PTR [edi+1], mm5
; Line 4067
	pminub	mm3, mm6
	pcmpeqb	mm6, mm3
	psubusb	mm1, mm6
	psubusb	mm2, mm6
	pand	mm4, mm6
	pand	mm5, mm6
	por	mm1, mm4
	por	mm2, mm5
; Line 4082
	pmaxub	mm1, mm0
; Line 4084
	pminub	mm1, mm2
; Line 4085
	movq	MMWORD PTR [edi], mm1
; Line 4086
	add	esi, eax
; Line 4087
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 4088
	dec	DWORD PTR _height$[ebp]
; Line 4093
	jne	$column_loop$65206
; Line 4095
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?SSE_Repair18@@YAXPAEHPBEHHHHH@Z ENDP			; SSE_Repair18
_TEXT	ENDS
PUBLIC	??1AVSValue@@QAE@XZ				; AVSValue::~AVSValue
PUBLIC	??0AVSValue@@QAE@PAVIClip@@@Z			; AVSValue::AVSValue
PUBLIC	??0RemoveGrain@@QAE@VPClip@@PAH_N@Z		; RemoveGrain::RemoveGrain
PUBLIC	?AsClip@AVSValue@@QBE?AVPClip@@XZ		; AVSValue::AsClip
PUBLIC	?AsBool@AVSValue@@QBE_N_N@Z			; AVSValue::AsBool
PUBLIC	?AsInt@AVSValue@@QBEHH@Z			; AVSValue::AsInt
PUBLIC	??AAVSValue@@QBEABV0@H@Z			; AVSValue::operator[]
PUBLIC	?CreateRemoveGrain@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateRemoveGrain
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv139 = -24						; size = 4
$T65926 = -16						; size = 4
_mode$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_args$ = 12						; size = 8
_user_data$ = 20					; size = 4
_env$ = 24						; size = 4
?CreateRemoveGrain@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z PROC ; CreateRemoveGrain
; Line 4202
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 4209
	push	2
	push	1
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsInt@AVSValue@@QBEHH@Z		; AVSValue::AsInt
	mov	DWORD PTR _mode$[ebp], eax
; Line 4210
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsInt@AVSValue@@QBEHH@Z		; AVSValue::AsInt
	mov	DWORD PTR _mode$[ebp+4], eax
; Line 4211
	mov	ecx, DWORD PTR _mode$[ebp+4]
	push	ecx
	push	3
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsInt@AVSValue@@QBEHH@Z		; AVSValue::AsInt
	mov	DWORD PTR _mode$[ebp+8], eax
; Line 4215
	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T65926[ebp], eax
	cmp	DWORD PTR $T65926[ebp], 0
	je	SHORT $LN3@CreateRemo
	push	0
	push	4
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	edx, al
	push	edx
	lea	eax, DWORD PTR _mode$[ebp]
	push	eax
	push	ecx
	push	esp
	push	0
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	mov	ecx, DWORD PTR $T65926[ebp]
	call	??0RemoveGrain@@QAE@VPClip@@PAH_N@Z	; RemoveGrain::RemoveGrain
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN4@CreateRemo
$LN3@CreateRemo:
	mov	DWORD PTR tv139[ebp], 0
$LN4@CreateRemo:
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AVSValue@@QAE@PAVIClip@@@Z		; AVSValue::AVSValue
	lea	ecx, DWORD PTR _args$[ebp]
	call	??1AVSValue@@QAE@XZ			; AVSValue::~AVSValue
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4217
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateRemoveGrain@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ENDP ; CreateRemoveGrain
_TEXT	ENDS
PUBLIC	?AddRef@IClip@@AAEXXZ				; IClip::AddRef
; Function compile flags: /Odtp
;	COMDAT ??0AVSValue@@QAE@PAVIClip@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
??0AVSValue@@QAE@PAVIClip@@@Z PROC			; AVSValue::AVSValue, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\avisynth.h
; Line 494
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 99					; 00000063H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN2@AVSValue
	mov	ecx, DWORD PTR _c$[ebp]
	call	?AddRef@IClip@@AAEXXZ			; IClip::AddRef
$LN2@AVSValue:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0AVSValue@@QAE@PAVIClip@@@Z ENDP			; AVSValue::AVSValue
_TEXT	ENDS
EXTRN	__imp__InterlockedIncrement@4:PROC
; Function compile flags: /Odtp
;	COMDAT ?AddRef@IClip@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AddRef@IClip@@AAEXXZ PROC				; IClip::AddRef, COMDAT
; _this$ = ecx
; Line 406
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddRef@IClip@@AAEXXZ ENDP				; IClip::AddRef
_TEXT	ENDS
PUBLIC	?Release@IClip@@AAEXXZ				; IClip::Release
PUBLIC	?IsClip@AVSValue@@QBE_NXZ			; AVSValue::IsClip
; Function compile flags: /Odtp
;	COMDAT ??1AVSValue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AVSValue@@QAE@XZ PROC				; AVSValue::~AVSValue, COMDAT
; _this$ = ecx
; Line 505
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsClip@AVSValue@@QBE_NXZ		; AVSValue::IsClip
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@AVSValue@2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@AVSValue@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Release@IClip@@AAEXXZ			; IClip::Release
$LN2@AVSValue@2:
	mov	esp, ebp
	pop	ebp
	ret	0
??1AVSValue@@QAE@XZ ENDP				; AVSValue::~AVSValue
_TEXT	ENDS
EXTRN	__imp__InterlockedDecrement@4:PROC
; Function compile flags: /Odtp
;	COMDAT ?Release@IClip@@AAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
_this$ = -12						; size = 4
$T65935 = -8						; size = 4
$T65934 = -4						; size = 4
?Release@IClip@@AAEXXZ PROC				; IClip::Release, COMDAT
; _this$ = ecx
; Line 407
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@Release
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T65935[ebp], edx
	mov	eax, DWORD PTR $T65935[ebp]
	mov	DWORD PTR $T65934[ebp], eax
	cmp	DWORD PTR $T65934[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T65934[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T65934[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN2@Release
$LN4@Release:
	mov	DWORD PTR tv74[ebp], 0
$LN2@Release:
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@IClip@@AAEXXZ ENDP				; IClip::Release
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsClip@AVSValue@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsClip@AVSValue@@QBE_NXZ PROC				; AVSValue::IsClip, COMDAT
; _this$ = ecx
; Line 512
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax]
	xor	eax, eax
	cmp	ecx, 99					; 00000063H
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsClip@AVSValue@@QBE_NXZ ENDP				; AVSValue::IsClip
_TEXT	ENDS
PUBLIC	??0PClip@@QAE@PAVIClip@@@Z			; PClip::PClip
; Function compile flags: /Odtp
;	COMDAT ?AsClip@AVSValue@@QBE?AVPClip@@XZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AsClip@AVSValue@@QBE?AVPClip@@XZ PROC			; AVSValue::AsClip, COMDAT
; _this$ = ecx
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsClip@AVSValue@@QBE_NXZ		; AVSValue::IsClip
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AsClip
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN4@AsClip
$LN3@AsClip:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AsClip:
	mov	eax, DWORD PTR tv71[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PClip@@QAE@PAVIClip@@@Z		; PClip::PClip
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AsClip@AVSValue@@QBE?AVPClip@@XZ ENDP			; AVSValue::AsClip
_TEXT	ENDS
PUBLIC	?Init@PClip@@AAEXPAVIClip@@@Z			; PClip::Init
; Function compile flags: /Odtp
;	COMDAT ??0PClip@@QAE@PAVIClip@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
??0PClip@@QAE@PAVIClip@@@Z PROC				; PClip::PClip, COMDAT
; _this$ = ecx
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@PClip@@AAEXPAVIClip@@@Z		; PClip::Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0PClip@@QAE@PAVIClip@@@Z ENDP				; PClip::PClip
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Init@PClip@@AAEXPAVIClip@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Init@PClip@@AAEXPAVIClip@@@Z PROC			; PClip::Init, COMDAT
; _this$ = ecx
; Line 431
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 432
	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN1@Init
	mov	ecx, DWORD PTR _x$[ebp]
	call	?AddRef@IClip@@AAEXXZ			; IClip::AddRef
$LN1@Init:
; Line 433
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 434
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@PClip@@AAEXPAVIClip@@@Z ENDP			; PClip::Init
_TEXT	ENDS
PUBLIC	?IsBool@AVSValue@@QBE_NXZ			; AVSValue::IsBool
; Function compile flags: /Odtp
;	COMDAT ?AsBool@AVSValue@@QBE_N_N@Z
_TEXT	SEGMENT
tv69 = -5						; size = 1
_this$ = -4						; size = 4
_def$ = 8						; size = 1
?AsBool@AVSValue@@QBE_N_N@Z PROC			; AVSValue::AsBool, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsBool@AVSValue@@QBE_NXZ		; AVSValue::IsBool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AsBool
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR tv69[ebp], dl
	jmp	SHORT $LN4@AsBool
$LN3@AsBool:
	mov	al, BYTE PTR _def$[ebp]
	mov	BYTE PTR tv69[ebp], al
$LN4@AsBool:
	mov	al, BYTE PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AsBool@AVSValue@@QBE_N_N@Z ENDP			; AVSValue::AsBool
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsBool@AVSValue@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBool@AVSValue@@QBE_NXZ PROC				; AVSValue::IsBool, COMDAT
; _this$ = ecx
; Line 513
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax]
	xor	eax, eax
	cmp	ecx, 98					; 00000062H
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBool@AVSValue@@QBE_NXZ ENDP				; AVSValue::IsBool
_TEXT	ENDS
PUBLIC	?IsInt@AVSValue@@QBE_NXZ			; AVSValue::IsInt
; Function compile flags: /Odtp
;	COMDAT ?AsInt@AVSValue@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_def$ = 8						; size = 4
?AsInt@AVSValue@@QBEHH@Z PROC				; AVSValue::AsInt, COMDAT
; _this$ = ecx
; Line 528
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInt@AVSValue@@QBE_NXZ		; AVSValue::IsInt
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AsInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@AsInt
$LN3@AsInt:
	mov	eax, DWORD PTR _def$[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN4@AsInt:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AsInt@AVSValue@@QBEHH@Z ENDP				; AVSValue::AsInt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsInt@AVSValue@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsInt@AVSValue@@QBE_NXZ PROC				; AVSValue::IsInt, COMDAT
; _this$ = ecx
; Line 514
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax]
	xor	eax, eax
	cmp	ecx, 105				; 00000069H
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInt@AVSValue@@QBE_NXZ ENDP				; AVSValue::IsInt
_TEXT	ENDS
PUBLIC	?IsArray@AVSValue@@QBE_NXZ			; AVSValue::IsArray
; Function compile flags: /Odtp
;	COMDAT ??AAVSValue@@QBEABV0@H@Z
_TEXT	SEGMENT
tv75 = -12						; size = 4
_this$ = -8						; size = 4
$T65953 = -4						; size = 4
_index$ = 8						; size = 4
??AAVSValue@@QBEABV0@H@Z PROC				; AVSValue::operator[], COMDAT
; _this$ = ecx
; Line 534
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 536
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsArray@AVSValue@@QBE_NXZ		; AVSValue::IsArray
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	DWORD PTR _index$[ebp], edx
	jge	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
$LN4@operator:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T65953[ebp], edx
	mov	eax, DWORD PTR $T65953[ebp]
; Line 537
	mov	esp, ebp
	pop	ebp
	ret	4
??AAVSValue@@QBEABV0@H@Z ENDP				; AVSValue::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsArray@AVSValue@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsArray@AVSValue@@QBE_NXZ PROC				; AVSValue::IsArray, COMDAT
; _this$ = ecx
; Line 518
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax]
	xor	eax, eax
	cmp	ecx, 97					; 00000061H
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsArray@AVSValue@@QBE_NXZ ENDP				; AVSValue::IsArray
_TEXT	ENDS
PUBLIC	??1PClip@@QAE@XZ				; PClip::~PClip
PUBLIC	??_C@_0DK@LILKGIKM@RemoveGrain?3?5the?5width?5or?5height@ ; `string'
PUBLIC	??_C@_0BN@EANNKHLA@RemoveGrain?3?5invalid?5mode?5?$CFu?$AA@ ; `string'
PUBLIC	??CPClip@@QBEPAVIClip@@XZ			; PClip::operator->
PUBLIC	??_C@_0DE@FPDNOLBE@RemoveGrain?3?5only?5planar?5color?5s@ ; `string'
PUBLIC	?IsYV12@VideoInfo@@QBE_NXZ			; VideoInfo::IsYV12
PUBLIC	??_7RemoveGrain@@6B@				; RemoveGrain::`vftable'
PUBLIC	??0GenericVideoFilter@@QAE@VPClip@@@Z		; GenericVideoFilter::GenericVideoFilter
PUBLIC	??0PClip@@QAE@ABV0@@Z				; PClip::PClip
PUBLIC	??_R4RemoveGrain@@6B@				; RemoveGrain::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRemoveGrain@@@8				; RemoveGrain `RTTI Type Descriptor'
PUBLIC	??_R3RemoveGrain@@8				; RemoveGrain::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RemoveGrain@@8				; RemoveGrain::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RemoveGrain@@8			; RemoveGrain::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GenericVideoFilter@@8		; GenericVideoFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGenericVideoFilter@@@8			; GenericVideoFilter `RTTI Type Descriptor'
PUBLIC	??_R3GenericVideoFilter@@8			; GenericVideoFilter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GenericVideoFilter@@8			; GenericVideoFilter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IClip@@8				; IClip::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVIClip@@@8				; IClip `RTTI Type Descriptor'
PUBLIC	??_R3IClip@@8					; IClip::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IClip@@8					; IClip::`RTTI Base Class Array'
PUBLIC	??_R1EA@?0A@EA@PlanarAccess@@8			; PlanarAccess::`RTTI Base Class Descriptor at (64,-1,0,64)'
PUBLIC	??_R0?AVPlanarAccess@@@8			; PlanarAccess `RTTI Type Descriptor'
PUBLIC	??_R3PlanarAccess@@8				; PlanarAccess::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PlanarAccess@@8				; PlanarAccess::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PlanarAccess@@8			; PlanarAccess::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetVersion@IClip@@UAGHXZ			; IClip::GetVersion
PUBLIC	?GetFrame@RemoveGrain@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; RemoveGrain::GetFrame
PUBLIC	?GetParity@GenericVideoFilter@@UAG_NH@Z		; GenericVideoFilter::GetParity
PUBLIC	?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z ; GenericVideoFilter::GetAudio
PUBLIC	?SetCacheHints@GenericVideoFilter@@UAGXHH@Z	; GenericVideoFilter::SetCacheHints
PUBLIC	?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
EXTRN	??0PlanarAccess@@QAE@ABUVideoInfo@@_N@Z:PROC	; PlanarAccess::PlanarAccess
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ERemoveGrain@@UAEPAXI@Z:PROC			; RemoveGrain::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@PlanarAccess@@8
; File c:\temp\irc\rg2\removegrain.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@PlanarAccess@@8 DD FLAT:??_R0?AVPlanarAccess@@@8 ; PlanarAccess::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R2PlanarAccess@@8
rdata$r	SEGMENT
??_R2PlanarAccess@@8 DD FLAT:??_R1A@?0A@EA@PlanarAccess@@8 ; PlanarAccess::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PlanarAccess@@8
rdata$r	SEGMENT
??_R3PlanarAccess@@8 DD 00H				; PlanarAccess::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPlanarAccess@@@8
_DATA	SEGMENT
??_R0?AVPlanarAccess@@@8 DD FLAT:??_7type_info@@6B@	; PlanarAccess `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPlanarAccess@@', 00H
_DATA	ENDS
;	COMDAT ??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	SEGMENT
??_R1EA@?0A@EA@PlanarAccess@@8 DD FLAT:??_R0?AVPlanarAccess@@@8 ; PlanarAccess::`RTTI Base Class Descriptor at (64,-1,0,64)'
	DD	00H
	DD	040H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R2IClip@@8
rdata$r	SEGMENT
??_R2IClip@@8 DD FLAT:??_R1A@?0A@EA@IClip@@8		; IClip::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IClip@@8
rdata$r	SEGMENT
??_R3IClip@@8 DD 00H					; IClip::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IClip@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIClip@@@8
_DATA	SEGMENT
??_R0?AVIClip@@@8 DD FLAT:??_7type_info@@6B@		; IClip `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIClip@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IClip@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IClip@@8 DD FLAT:??_R0?AVIClip@@@8	; IClip::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IClip@@8
rdata$r	ENDS
;	COMDAT ??_R2GenericVideoFilter@@8
rdata$r	SEGMENT
??_R2GenericVideoFilter@@8 DD FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8 ; GenericVideoFilter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
rdata$r	ENDS
;	COMDAT ??_R3GenericVideoFilter@@8
rdata$r	SEGMENT
??_R3GenericVideoFilter@@8 DD 00H			; GenericVideoFilter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2GenericVideoFilter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGenericVideoFilter@@@8
_DATA	SEGMENT
??_R0?AVGenericVideoFilter@@@8 DD FLAT:??_7type_info@@6B@ ; GenericVideoFilter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGenericVideoFilter@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GenericVideoFilter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GenericVideoFilter@@8 DD FLAT:??_R0?AVGenericVideoFilter@@@8 ; GenericVideoFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GenericVideoFilter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RemoveGrain@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RemoveGrain@@8 DD FLAT:??_R0?AVRemoveGrain@@@8 ; RemoveGrain::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RemoveGrain@@8
rdata$r	ENDS
;	COMDAT ??_R2RemoveGrain@@8
rdata$r	SEGMENT
??_R2RemoveGrain@@8 DD FLAT:??_R1A@?0A@EA@RemoveGrain@@8 ; RemoveGrain::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
	DD	FLAT:??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R3RemoveGrain@@8
rdata$r	SEGMENT
??_R3RemoveGrain@@8 DD 00H				; RemoveGrain::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2RemoveGrain@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRemoveGrain@@@8
_DATA	SEGMENT
??_R0?AVRemoveGrain@@@8 DD FLAT:??_7type_info@@6B@	; RemoveGrain `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRemoveGrain@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RemoveGrain@@6B@
rdata$r	SEGMENT
??_R4RemoveGrain@@6B@ DD 00H				; RemoveGrain::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRemoveGrain@@@8
	DD	FLAT:??_R3RemoveGrain@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DK@LILKGIKM@RemoveGrain?3?5the?5width?5or?5height@
CONST	SEGMENT
??_C@_0DK@LILKGIKM@RemoveGrain?3?5the?5width?5or?5height@ DB 'RemoveGrain'
	DB	': the width or height of the clip is too small', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EANNKHLA@RemoveGrain?3?5invalid?5mode?5?$CFu?$AA@
CONST	SEGMENT
??_C@_0BN@EANNKHLA@RemoveGrain?3?5invalid?5mode?5?$CFu?$AA@ DB 'RemoveGra'
	DB	'in: invalid mode %u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FPDNOLBE@RemoveGrain?3?5only?5planar?5color?5s@
CONST	SEGMENT
??_C@_0DE@FPDNOLBE@RemoveGrain?3?5only?5planar?5color?5s@ DB 'RemoveGrain'
	DB	': only planar color spaces are supported', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7RemoveGrain@@6B@
CONST	SEGMENT
??_7RemoveGrain@@6B@ DD FLAT:??_R4RemoveGrain@@6B@	; RemoveGrain::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@RemoveGrain@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_ERemoveGrain@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0RemoveGrain@@QAE@VPClip@@PAH_N@Z
_TEXT	SEGMENT
tv160 = -20						; size = 4
_this$ = -16						; size = 4
_w$65280 = -8						; size = 4
_i$ = -4						; size = 4
_clip$ = 8						; size = 4
_mode$ = 12						; size = 4
_planar$ = 16						; size = 1
??0RemoveGrain@@QAE@VPClip@@PAH_N@Z PROC		; RemoveGrain::RemoveGrain, COMDAT
; _this$ = ecx
; Line 4158
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	lea	eax, DWORD PTR _clip$[ebp]
	push	eax
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericVideoFilter@@QAE@VPClip@@@Z	; GenericVideoFilter::GenericVideoFilter
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0PlanarAccess@@QAE@ABUVideoInfo@@_N@Z	; PlanarAccess::PlanarAccess
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7RemoveGrain@@6B@
; Line 4159
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsYV12@VideoInfo@@QBE_NXZ		; VideoInfo::IsYV12
	movzx	eax, al
	movzx	ecx, BYTE PTR _planar$[ebp]
	add	eax, ecx
	jne	SHORT $LN12@RemoveGrai
; Line 4165
	push	OFFSET ??_C@_0DE@FPDNOLBE@RemoveGrain?3?5only?5planar?5color?5s@
	mov	edx, DWORD PTR _AVSenvironment
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _AVSenvironment
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	add	esp, 8
$LN12@RemoveGrai:
; Line 4167
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv160[ebp], eax
	push	0
	push	0
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	mov	ecx, DWORD PTR tv160[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 4169
	mov	ecx, DWORD PTR _mode$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jge	SHORT $LN11@RemoveGrai
; Line 4171
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], eax
; Line 4172
	mov	edx, DWORD PTR _mode$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jge	SHORT $LN11@RemoveGrai
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], ecx
$LN11@RemoveGrai:
; Line 4175
	mov	eax, DWORD PTR _mode$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $LN9@RemoveGrai
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN9@RemoveGrai:
; Line 4177
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _i$[ebp], eax
$LN8@RemoveGrai:
; Line 4180
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 18		; 00000012H
	jle	SHORT $LN5@RemoveGrai
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_0BN@EANNKHLA@RemoveGrain?3?5invalid?5mode?5?$CFu?$AA@
	mov	eax, DWORD PTR _AVSenvironment
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _AVSenvironment
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	add	esp, 12					; 0000000cH
$LN5@RemoveGrai:
; Line 4181
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jge	SHORT $LN4@RemoveGrai
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+164], OFFSET ?do_nothing@@YAXPAEHPBEHHHHH@Z ; do_nothing
	jmp	SHORT $LN3@RemoveGrai
$LN4@RemoveGrai:
; Line 4182
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cleaning_methods[ecx*4]
	mov	DWORD PTR [eax+edx*4+164], ecx
$LN3@RemoveGrai:
; Line 4183
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+100]
	sub	ecx, 2
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+116], ecx
; Line 4184
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, 10					; 0000000aH
	sub	eax, DWORD PTR [edx+ecx*4+88]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+152], eax
; Line 4188
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+88]
	sub	edx, 11					; 0000000bH
	mov	DWORD PTR _w$65280[ebp], edx
; Line 4190
	mov	eax, DWORD PTR _w$65280[ebp]
	shr	eax, 3
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+128], eax
; Line 4191
	mov	eax, DWORD PTR _w$65280[ebp]
	and	eax, 7
	sub	eax, 7
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+140], eax
; Line 4193
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jns	$LN8@RemoveGrai
; Line 4194
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+128], 0
	jle	SHORT $LN1@RemoveGrai
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+116], 0
	jg	SHORT $LN13@RemoveGrai
$LN1@RemoveGrai:
; Line 4195
	push	OFFSET ??_C@_0DK@LILKGIKM@RemoveGrain?3?5the?5width?5or?5height@
	mov	ecx, DWORD PTR _AVSenvironment
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _AVSenvironment
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	add	esp, 8
$LN13@RemoveGrai:
; Line 4196
	lea	ecx, DWORD PTR _clip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0RemoveGrain@@QAE@VPClip@@PAH_N@Z ENDP		; RemoveGrain::RemoveGrain
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsYV12@VideoInfo@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?IsYV12@VideoInfo@@QBE_NXZ PROC				; VideoInfo::IsYV12, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\avisynth.h
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -1610612728			; a0000008H
	cmp	ecx, -1610612728			; a0000008H
	je	SHORT $LN3@IsYV12
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, -1610612720			; a0000010H
	cmp	eax, -1610612720			; a0000010H
	je	SHORT $LN3@IsYV12
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@IsYV12
$LN3@IsYV12:
	mov	DWORD PTR tv70[ebp], 1
$LN4@IsYV12:
	mov	al, BYTE PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsYV12@VideoInfo@@QBE_NXZ ENDP				; VideoInfo::IsYV12
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetVersion@IClip@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetVersion@IClip@@UAGHXZ PROC				; IClip::GetVersion, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	mov	eax, 2
	pop	ebp
	ret	4
?GetVersion@IClip@@UAGHXZ ENDP				; IClip::GetVersion
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0PClip@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
??0PClip@@QAE@ABV0@@Z PROC				; PClip::PClip, COMDAT
; _this$ = ecx
; Line 443
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@PClip@@AAEXPAVIClip@@@Z		; PClip::Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0PClip@@QAE@ABV0@@Z ENDP				; PClip::PClip
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??CPClip@@QBEPAVIClip@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CPClip@@QBEPAVIClip@@XZ PROC				; PClip::operator->, COMDAT
; _this$ = ecx
; Line 448
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??CPClip@@QBEPAVIClip@@XZ ENDP				; PClip::operator->
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1PClip@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PClip@@QAE@XZ PROC					; PClip::~PClip, COMDAT
; _this$ = ecx
; Line 454
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@PClip
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Release@IClip@@AAEXXZ			; IClip::Release
$LN2@PClip:
	mov	esp, ebp
	pop	ebp
	ret	0
??1PClip@@QAE@XZ ENDP					; PClip::~PClip
_TEXT	ENDS
PUBLIC	??_7GenericVideoFilter@@6B@			; GenericVideoFilter::`vftable'
PUBLIC	??0IClip@@QAE@XZ				; IClip::IClip
PUBLIC	??_R4GenericVideoFilter@@6B@			; GenericVideoFilter::`RTTI Complete Object Locator'
PUBLIC	?GetFrame@GenericVideoFilter@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; GenericVideoFilter::GetFrame
EXTRN	??_EGenericVideoFilter@@UAEPAXI@Z:PROC		; GenericVideoFilter::`vector deleting destructor'
;	COMDAT ??_R4GenericVideoFilter@@6B@
rdata$r	SEGMENT
??_R4GenericVideoFilter@@6B@ DD 00H			; GenericVideoFilter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGenericVideoFilter@@@8
	DD	FLAT:??_R3GenericVideoFilter@@8
rdata$r	ENDS
;	COMDAT ??_7GenericVideoFilter@@6B@
CONST	SEGMENT
??_7GenericVideoFilter@@6B@ DD FLAT:??_R4GenericVideoFilter@@6B@ ; GenericVideoFilter::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@GenericVideoFilter@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EGenericVideoFilter@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0GenericVideoFilter@@QAE@VPClip@@@Z
_TEXT	SEGMENT
tv92 = -8						; size = 4
_this$ = -4						; size = 4
__child$ = 8						; size = 4
??0GenericVideoFilter@@QAE@VPClip@@@Z PROC		; GenericVideoFilter::GenericVideoFilter, COMDAT
; _this$ = ecx
; Line 571
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IClip@@QAE@XZ			; IClip::IClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GenericVideoFilter@@6B@
	lea	ecx, DWORD PTR __child$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv92[ebp], eax
	mov	edx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 12					; 0000000cH
	mov	esi, eax
	rep movsd
	lea	ecx, DWORD PTR __child$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0GenericVideoFilter@@QAE@VPClip@@@Z ENDP		; GenericVideoFilter::GenericVideoFilter
_TEXT	ENDS
PUBLIC	??_7IClip@@6B@					; IClip::`vftable'
PUBLIC	??_R4IClip@@6B@					; IClip::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
EXTRN	??_EIClip@@UAEPAXI@Z:PROC			; IClip::`vector deleting destructor'
;	COMDAT ??_R4IClip@@6B@
rdata$r	SEGMENT
??_R4IClip@@6B@ DD 00H					; IClip::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIClip@@@8
	DD	FLAT:??_R3IClip@@8
rdata$r	ENDS
;	COMDAT ??_7IClip@@6B@
CONST	SEGMENT
??_7IClip@@6B@ DD FLAT:??_R4IClip@@6B@			; IClip::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EIClip@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0IClip@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IClip@@QAE@XZ PROC					; IClip::IClip, COMDAT
; _this$ = ecx
; Line 409
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IClip@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IClip@@QAE@XZ ENDP					; IClip::IClip
_TEXT	ENDS
PUBLIC	??1IClip@@UAE@XZ				; IClip::~IClip
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GIClip@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIClip@@UAEPAXI@Z PROC				; IClip::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IClip@@UAE@XZ			; IClip::~IClip
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIClip@@UAEPAXI@Z ENDP				; IClip::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1IClip@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1IClip@@UAE@XZ PROC					; IClip::~IClip, COMDAT
; _this$ = ecx
; Line 418
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IClip@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1IClip@@UAE@XZ ENDP					; IClip::~IClip
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetFrame@GenericVideoFilter@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
_env$ = 20						; size = 4
?GetFrame@GenericVideoFilter@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; GenericVideoFilter::GetFrame, COMDAT
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFrame@GenericVideoFilter@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; GenericVideoFilter::GetFrame
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_buf$ = 12						; size = 4
_start$ = 16						; size = 8
_count$ = 24						; size = 8
_env$ = 32						; size = 4
?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z PROC ; GenericVideoFilter::GetAudio, COMDAT
; Line 573
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z ENDP ; GenericVideoFilter::GetAudio
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ PROC ; GenericVideoFilter::GetVideoInfo, COMDAT
; Line 574
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	pop	ebp
	ret	4
?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ENDP ; GenericVideoFilter::GetVideoInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetParity@GenericVideoFilter@@UAG_NH@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_n$ = 12						; size = 4
?GetParity@GenericVideoFilter@@UAG_NH@Z PROC		; GenericVideoFilter::GetParity, COMDAT
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetParity@GenericVideoFilter@@UAG_NH@Z ENDP		; GenericVideoFilter::GetParity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_cachehints$ = 12					; size = 4
_frame_range$ = 16					; size = 4
?SetCacheHints@GenericVideoFilter@@UAGXHH@Z PROC	; GenericVideoFilter::SetCacheHints, COMDAT
; Line 576
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	12					; 0000000cH
?SetCacheHints@GenericVideoFilter@@UAGXHH@Z ENDP	; GenericVideoFilter::SetCacheHints
_TEXT	ENDS
PUBLIC	??1GenericVideoFilter@@UAE@XZ			; GenericVideoFilter::~GenericVideoFilter
; Function compile flags: /Odtp
;	COMDAT ??_GGenericVideoFilter@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGenericVideoFilter@@UAEPAXI@Z PROC			; GenericVideoFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericVideoFilter@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGenericVideoFilter@@UAEPAXI@Z ENDP			; GenericVideoFilter::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1GenericVideoFilter@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GenericVideoFilter@@UAE@XZ PROC			; GenericVideoFilter::~GenericVideoFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1IClip@@UAE@XZ			; IClip::~IClip
	mov	esp, ebp
	pop	ebp
	ret	0
??1GenericVideoFilter@@UAE@XZ ENDP			; GenericVideoFilter::~GenericVideoFilter
_TEXT	ENDS
PUBLIC	??1PVideoFrame@@QAE@XZ				; PVideoFrame::~PVideoFrame
PUBLIC	??0PVideoFrame@@QAE@ABV0@@Z			; PVideoFrame::PVideoFrame
PUBLIC	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
PUBLIC	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z	; PlanarAccess::GetPitch
PUBLIC	?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ; PlanarAccess::GetWritePtr
; Function compile flags: /Odtp
;	COMDAT ?GetFrame@RemoveGrain@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv72 = -32						; size = 4
_dpitch$65261 = -28					; size = 4
_spitch$65263 = -24					; size = 4
_dp$65260 = -20						; size = 4
_sp$65262 = -16						; size = 4
_sf$ = -12						; size = 4
_df$ = -8						; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
_env$ = 20						; size = 4
?GetFrame@RemoveGrain@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; RemoveGrain::GetFrame, COMDAT
; File c:\temp\irc\rg2\removegrain.cpp
; Line 4120
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 4121
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 4125
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+56]
	call	eax
; Line 4127
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _i$[ebp], edx
$LN3@GetFrame:
; Line 4130
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ; PlanarAccess::GetWritePtr
	mov	DWORD PTR _dp$65260[ebp], eax
; Line 4131
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	mov	DWORD PTR _dpitch$65261[ebp], eax
; Line 4138
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	mov	DWORD PTR _sp$65262[ebp], eax
; Line 4139
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	mov	DWORD PTR _spitch$65263[ebp], eax
; Line 4141
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+88]
	push	ecx
	mov	edx, DWORD PTR _sp$65262[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$65260[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 4142
	mov	ecx, DWORD PTR _dp$65260[ebp]
	add	ecx, DWORD PTR _dpitch$65261[ebp]
	mov	DWORD PTR _dp$65260[ebp], ecx
; Line 4143
	mov	edx, DWORD PTR _sp$65262[ebp]
	add	edx, DWORD PTR _spitch$65263[ebp]
	mov	DWORD PTR _sp$65262[ebp], edx
; Line 4144
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+116]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+152]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+140]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+128]
	push	edx
	mov	eax, DWORD PTR _spitch$65263[ebp]
	push	eax
	mov	ecx, DWORD PTR _sp$65262[ebp]
	push	ecx
	mov	edx, DWORD PTR _dpitch$65261[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$65260[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+164]
	call	eax
	add	esp, 32					; 00000020H
; Line 4146
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+88]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+116]
	imul	eax, DWORD PTR _spitch$65263[ebp]
	add	eax, DWORD PTR _sp$65262[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+116]
	imul	eax, DWORD PTR _dpitch$65261[ebp]
	add	eax, DWORD PTR _dp$65260[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 4148
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jns	$LN3@GetFrame
; Line 4149
	emms
; Line 4150
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _df$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4151
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFrame@RemoveGrain@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; RemoveGrain::GetFrame
_TEXT	ENDS
PUBLIC	?Init@PVideoFrame@@AAEXPAVVideoFrame@@@Z	; PVideoFrame::Init
; Function compile flags: /Odtp
;	COMDAT ??0PVideoFrame@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
??0PVideoFrame@@QAE@ABV0@@Z PROC			; PVideoFrame::PVideoFrame, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\avisynth.h
; Line 475
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@PVideoFrame@@AAEXPAVVideoFrame@@@Z ; PVideoFrame::Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0PVideoFrame@@QAE@ABV0@@Z ENDP			; PVideoFrame::PVideoFrame
_TEXT	ENDS
PUBLIC	?AddRef@VideoFrame@@AAEXXZ			; VideoFrame::AddRef
; Function compile flags: /Odtp
;	COMDAT ?Init@PVideoFrame@@AAEXPAVVideoFrame@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Init@PVideoFrame@@AAEXPAVVideoFrame@@@Z PROC		; PVideoFrame::Init, COMDAT
; _this$ = ecx
; Line 463
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 464
	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN1@Init@2
	mov	ecx, DWORD PTR _x$[ebp]
	call	?AddRef@VideoFrame@@AAEXXZ		; VideoFrame::AddRef
$LN1@Init@2:
; Line 465
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 466
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@PVideoFrame@@AAEXPAVVideoFrame@@@Z ENDP		; PVideoFrame::Init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AddRef@VideoFrame@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AddRef@VideoFrame@@AAEXXZ PROC				; VideoFrame::AddRef, COMDAT
; _this$ = ecx
; Line 322
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AddRef@VideoFrame@@AAEXXZ ENDP				; VideoFrame::AddRef
_TEXT	ENDS
PUBLIC	?Release@VideoFrame@@AAEXXZ			; VideoFrame::Release
; Function compile flags: /Odtp
;	COMDAT ??1PVideoFrame@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PVideoFrame@@QAE@XZ PROC				; PVideoFrame::~PVideoFrame, COMDAT
; _this$ = ecx
; Line 486
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@PVideoFram
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Release@VideoFrame@@AAEXXZ		; VideoFrame::Release
$LN2@PVideoFram:
	mov	esp, ebp
	pop	ebp
	ret	0
??1PVideoFrame@@QAE@XZ ENDP				; PVideoFrame::~PVideoFrame
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Release@VideoFrame@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@VideoFrame@@AAEXXZ PROC			; VideoFrame::Release, COMDAT
; _this$ = ecx
; Line 323
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 12					; 0000000cH
	push	edx
	call	DWORD PTR __imp__InterlockedDecrement@4
$LN1@Release@2:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@VideoFrame@@AAEXXZ ENDP			; VideoFrame::Release
_TEXT	ENDS
PUBLIC	??CPVideoFrame@@QBEPAVVideoFrame@@XZ		; PVideoFrame::operator->
; Function compile flags: /Odtp
;	COMDAT ?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_frame$ = 8						; size = 4
_i$ = 12						; size = 4
?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z PROC	; PlanarAccess::GetPitch, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\planar.h
; Line 32
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 33
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	call	??CPVideoFrame@@QBEPAVVideoFrame@@XZ	; PVideoFrame::operator->
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 34
	mov	esp, ebp
	pop	ebp
	ret	8
?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ENDP	; PlanarAccess::GetPitch
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??CPVideoFrame@@QBEPAVVideoFrame@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??CPVideoFrame@@QBEPAVVideoFrame@@XZ PROC		; PVideoFrame::operator->, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\avisynth.h
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??CPVideoFrame@@QBEPAVVideoFrame@@XZ ENDP		; PVideoFrame::operator->
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_frame$ = 8						; size = 4
_i$ = 12						; size = 4
?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z PROC ; PlanarAccess::GetReadPtr, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\planar.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 38
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	call	??CPVideoFrame@@QBEPAVVideoFrame@@XZ	; PVideoFrame::operator->
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 39
	mov	esp, ebp
	pop	ebp
	ret	8
?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ENDP ; PlanarAccess::GetReadPtr
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_frame$ = 8						; size = 4
_i$ = 12						; size = 4
?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z PROC ; PlanarAccess::GetWritePtr, COMDAT
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 43
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	call	??CPVideoFrame@@QBEPAVVideoFrame@@XZ	; PVideoFrame::operator->
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ENDP ; PlanarAccess::GetWritePtr
_TEXT	ENDS
PUBLIC	??1RemoveGrain@@UAE@XZ				; RemoveGrain::~RemoveGrain
; Function compile flags: /Odtp
;	COMDAT ??_GRemoveGrain@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRemoveGrain@@UAEPAXI@Z PROC				; RemoveGrain::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RemoveGrain@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRemoveGrain@@UAEPAXI@Z ENDP				; RemoveGrain::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1RemoveGrain@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RemoveGrain@@UAE@XZ PROC				; RemoveGrain::~RemoveGrain, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericVideoFilter@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1RemoveGrain@@UAE@XZ ENDP				; RemoveGrain::~RemoveGrain
_TEXT	ENDS
PUBLIC	??_7GenericClense@@6B@				; GenericClense::`vftable'
PUBLIC	??0GenericClense@@QAE@VPClip@@_N1@Z		; GenericClense::GenericClense
PUBLIC	??_R4GenericClense@@6B@				; GenericClense::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGenericClense@@@8			; GenericClense `RTTI Type Descriptor'
PUBLIC	??_R3GenericClense@@8				; GenericClense::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GenericClense@@8				; GenericClense::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GenericClense@@8			; GenericClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EGenericClense@@UAEPAXI@Z:PROC		; GenericClense::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@GenericClense@@8
; File c:\temp\irc\rg2\removegrain.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@GenericClense@@8 DD FLAT:??_R0?AVGenericClense@@@8 ; GenericClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GenericClense@@8
rdata$r	ENDS
;	COMDAT ??_R2GenericClense@@8
rdata$r	SEGMENT
??_R2GenericClense@@8 DD FLAT:??_R1A@?0A@EA@GenericClense@@8 ; GenericClense::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
	DD	FLAT:??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R3GenericClense@@8
rdata$r	SEGMENT
??_R3GenericClense@@8 DD 00H				; GenericClense::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2GenericClense@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGenericClense@@@8
_DATA	SEGMENT
??_R0?AVGenericClense@@@8 DD FLAT:??_7type_info@@6B@	; GenericClense `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGenericClense@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GenericClense@@6B@
rdata$r	SEGMENT
??_R4GenericClense@@6B@ DD 00H				; GenericClense::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGenericClense@@@8
	DD	FLAT:??_R3GenericClense@@8
rdata$r	ENDS
;	COMDAT ??_7GenericClense@@6B@
CONST	SEGMENT
??_7GenericClense@@6B@ DD FLAT:??_R4GenericClense@@6B@	; GenericClense::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@GenericVideoFilter@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EGenericClense@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
tv130 = -17						; size = 1
_this$ = -16						; size = 4
_w$65339 = -8						; size = 4
_i$ = -4						; size = 4
_clip$ = 8						; size = 4
_grey$ = 12						; size = 1
_planar$ = 16						; size = 1
??0GenericClense@@QAE@VPClip@@_N1@Z PROC		; GenericClense::GenericClense
; _this$ = ecx
; Line 4780
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	lea	eax, DWORD PTR _clip$[ebp]
	push	eax
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericVideoFilter@@QAE@VPClip@@@Z	; GenericVideoFilter::GenericVideoFilter
	movzx	ecx, BYTE PTR _planar$[ebp]
	test	ecx, ecx
	je	SHORT $LN7@GenericCle
	movzx	edx, BYTE PTR _grey$[ebp]
	test	edx, edx
	je	SHORT $LN7@GenericCle
	mov	BYTE PTR tv130[ebp], 1
	jmp	SHORT $LN8@GenericCle
$LN7@GenericCle:
	mov	BYTE PTR tv130[ebp], 0
$LN8@GenericCle:
	movzx	eax, BYTE PTR tv130[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0PlanarAccess@@QAE@ABUVideoInfo@@_N@Z	; PlanarAccess::PlanarAccess
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7GenericClense@@6B@
; Line 4781
	movzx	eax, BYTE PTR _grey$[ebp]
	test	eax, eax
	je	SHORT $LN4@GenericCle
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], 0
$LN4@GenericCle:
; Line 4782
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _i$[ebp], eax
$LN3@GenericCle:
; Line 4785
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+88]
	mov	DWORD PTR _w$65339[ebp], eax
; Line 4786
	mov	ecx, DWORD PTR _w$65339[ebp]
	sub	ecx, 1
	mov	DWORD PTR _w$65339[ebp], ecx
	mov	eax, DWORD PTR _w$65339[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+116], eax
; Line 4787
	mov	edx, DWORD PTR _w$65339[ebp]
	and	edx, 15					; 0000000fH
	sub	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+128], edx
; Line 4788
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR [eax+edx*4+88]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+128]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+140], ecx
; Line 4789
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jns	SHORT $LN3@GenericCle
; Line 4790
	lea	ecx, DWORD PTR _clip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0GenericClense@@QAE@VPClip@@_N1@Z ENDP		; GenericClense::GenericClense
_TEXT	ENDS
PUBLIC	??1GenericClense@@UAE@XZ			; GenericClense::~GenericClense
; Function compile flags: /Odtp
;	COMDAT ??_GGenericClense@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGenericClense@@UAEPAXI@Z PROC			; GenericClense::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericClense@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGenericClense@@UAEPAXI@Z ENDP			; GenericClense::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1GenericClense@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GenericClense@@UAE@XZ PROC				; GenericClense::~GenericClense, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericVideoFilter@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1GenericClense@@UAE@XZ ENDP				; GenericClense::~GenericClense
_TEXT	ENDS
PUBLIC	??0Clense@@QAE@VPClip@@_N11H@Z			; Clense::Clense
PUBLIC	?CreateClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateClense
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv138 = -12						; size = 4
$T65996 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_args$ = 12						; size = 8
_user_data$ = 20					; size = 4
_env$ = 24						; size = 4
?CreateClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z PROC ; CreateClense
; Line 4952
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 4954
	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T65996[ebp], eax
	cmp	DWORD PTR $T65996[ebp], 0
	je	SHORT $LN3@CreateClen
	push	2
	push	4
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsInt@AVSValue@@QBEHH@Z		; AVSValue::AsInt
	push	eax
	push	0
	push	3
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	eax, al
	push	eax
	push	1
	push	2
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	ecx, al
	push	ecx
	push	0
	push	1
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	edx, al
	push	edx
	push	ecx
	push	esp
	push	0
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	mov	ecx, DWORD PTR $T65996[ebp]
	call	??0Clense@@QAE@VPClip@@_N11H@Z		; Clense::Clense
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN4@CreateClen
$LN3@CreateClen:
	mov	DWORD PTR tv138[ebp], 0
$LN4@CreateClen:
	mov	eax, DWORD PTR tv138[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AVSValue@@QAE@PAVIClip@@@Z		; AVSValue::AVSValue
	lea	ecx, DWORD PTR _args$[ebp]
	call	??1AVSValue@@QAE@XZ			; AVSValue::~AVSValue
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4955
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ENDP ; CreateClense
_TEXT	ENDS
PUBLIC	??0PVideoFrame@@QAE@PAVVideoFrame@@@Z		; PVideoFrame::PVideoFrame
PUBLIC	??_7Clense@@6B@					; Clense::`vftable'
PUBLIC	??_R4Clense@@6B@				; Clense::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVClense@@@8				; Clense `RTTI Type Descriptor'
PUBLIC	??_R3Clense@@8					; Clense::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Clense@@8					; Clense::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Clense@@8				; Clense::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetFrame@Clense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; Clense::GetFrame
EXTRN	??_EClense@@UAEPAXI@Z:PROC			; Clense::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Clense@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Clense@@8 DD FLAT:??_R0?AVClense@@@8	; Clense::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clense@@8
rdata$r	ENDS
;	COMDAT ??_R2Clense@@8
rdata$r	SEGMENT
??_R2Clense@@8 DD FLAT:??_R1A@?0A@EA@Clense@@8		; Clense::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericClense@@8
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
	DD	FLAT:??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R3Clense@@8
rdata$r	SEGMENT
??_R3Clense@@8 DD 00H					; Clense::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2Clense@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVClense@@@8
_DATA	SEGMENT
??_R0?AVClense@@@8 DD FLAT:??_7type_info@@6B@		; Clense `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVClense@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Clense@@6B@
rdata$r	SEGMENT
??_R4Clense@@6B@ DD 00H					; Clense::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVClense@@@8
	DD	FLAT:??_R3Clense@@8
rdata$r	ENDS
;	COMDAT ??_7Clense@@6B@
CONST	SEGMENT
??_7Clense@@6B@ DD FLAT:??_R4Clense@@6B@		; Clense::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@Clense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EClense@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0Clense@@QAE@VPClip@@_N11H@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
_this$ = -8						; size = 4
_clip$ = 8						; size = 4
_grey$ = 12						; size = 1
__reduceflicker$ = 16					; size = 1
_planar$ = 20						; size = 1
_cache$ = 24						; size = 4
??0Clense@@QAE@VPClip@@_N11H@Z PROC			; Clense::Clense, COMDAT
; _this$ = ecx
; Line 4944
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _planar$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _grey$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR _clip$[ebp]
	push	edx
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericClense@@QAE@VPClip@@_N1@Z	; GenericClense::GenericClense
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Clense@@6B@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??0PVideoFrame@@QAE@PAVVideoFrame@@@Z	; PVideoFrame::PVideoFrame
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+156], -2			; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR __reduceflicker$[ebp]
	mov	BYTE PTR [edx+160], al
; Line 4945
	cmp	DWORD PTR _cache$[ebp], 0
	jl	SHORT $LN2@Clense
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	mov	eax, DWORD PTR tv144[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
$LN2@Clense:
; Line 4946
	lea	ecx, DWORD PTR _clip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0Clense@@QAE@VPClip@@_N11H@Z ENDP			; Clense::Clense
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0PVideoFrame@@QAE@PAVVideoFrame@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
??0PVideoFrame@@QAE@PAVVideoFrame@@@Z PROC		; PVideoFrame::PVideoFrame, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\avisynth.h
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@PVideoFrame@@AAEXPAVVideoFrame@@@Z ; PVideoFrame::Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0PVideoFrame@@QAE@PAVVideoFrame@@@Z ENDP		; PVideoFrame::PVideoFrame
_TEXT	ENDS
PUBLIC	??4PVideoFrame@@QAEXABV0@@Z			; PVideoFrame::operator=
; Function compile flags: /Odtp
;	COMDAT ?GetFrame@Clense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv175 = -36						; size = 4
tv148 = -32						; size = 4
tv129 = -28						; size = 4
tv79 = -24						; size = 4
$T66004 = -20						; size = 4
_sf$ = -16						; size = 4
_nf$ = -12						; size = 4
_df$ = -8						; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
_env$ = 20						; size = 4
?GetFrame@Clense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; Clense::GetFrame, COMDAT
; File c:\temp\irc\rg2\removegrain.cpp
; Line 4921
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 4922
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+160]
	test	ecx, ecx
	je	SHORT $LN6@GetFrame@2
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+156], edx
	je	SHORT $LN7@GetFrame@2
$LN6@GetFrame@2:
; Line 4924
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN5@GetFrame@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	edx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@GetFrame@2
$LN5@GetFrame@2:
; Line 4925
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv129[ebp], eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T66004[ebp]
	push	ecx
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	mov	eax, DWORD PTR tv129[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??4PVideoFrame@@QAEXABV0@@Z		; PVideoFrame::operator=
	lea	ecx, DWORD PTR $T66004[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
$LN7@GetFrame@2:
; Line 4927
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv148[ebp]
	push	eax
	mov	ecx, DWORD PTR tv148[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 4928
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jl	SHORT $LN4@GetFrame@2
	lea	eax, DWORD PTR _sf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@GetFrame@2
$LN4@GetFrame@2:
; Line 4929
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv175[ebp], eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	push	edx
	lea	eax, DWORD PTR _nf$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv175[ebp]
	push	ecx
	mov	edx, DWORD PTR tv175[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
; Line 4930
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+56]
	call	ecx
; Line 4931
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _i$[ebp], eax
$LN3@GetFrame@2:
; Line 4934
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+100]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+140]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+128]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+116]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _sf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ; PlanarAccess::GetWritePtr
	push	eax
	call	?clense@@YAXPAEHPBEH1H1HHHHH@Z		; clense
	add	esp, 48					; 00000030H
; Line 4935
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jns	$LN3@GetFrame@2
; Line 4936
	emms
; Line 4937
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??4PVideoFrame@@QAEXABV0@@Z		; PVideoFrame::operator=
; Line 4938
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+156], edx
; Line 4939
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _df$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _nf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN8@GetFrame@2:
; Line 4940
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFrame@Clense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; Clense::GetFrame
_TEXT	ENDS
PUBLIC	?Set@PVideoFrame@@AAEXPAVVideoFrame@@@Z		; PVideoFrame::Set
; Function compile flags: /Odtp
;	COMDAT ??4PVideoFrame@@QAEXABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
??4PVideoFrame@@QAEXABV0@@Z PROC			; PVideoFrame::operator=, COMDAT
; _this$ = ecx
; File c:\temp\irc\rg2\avisynth.h
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@PVideoFrame@@AAEXPAVVideoFrame@@@Z	; PVideoFrame::Set
	mov	esp, ebp
	pop	ebp
	ret	4
??4PVideoFrame@@QAEXABV0@@Z ENDP			; PVideoFrame::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Set@PVideoFrame@@AAEXPAVVideoFrame@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Set@PVideoFrame@@AAEXPAVVideoFrame@@@Z PROC		; PVideoFrame::Set, COMDAT
; _this$ = ecx
; Line 467
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 468
	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN2@Set
	mov	ecx, DWORD PTR _x$[ebp]
	call	?AddRef@VideoFrame@@AAEXXZ		; VideoFrame::AddRef
$LN2@Set:
; Line 469
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Set
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Release@VideoFrame@@AAEXXZ		; VideoFrame::Release
$LN1@Set:
; Line 470
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], eax
; Line 471
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@PVideoFrame@@AAEXPAVVideoFrame@@@Z ENDP		; PVideoFrame::Set
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_pp$ = 24						; size = 4
_ppitch$ = 28						; size = 4
_np$ = 32						; size = 4
_npitch$ = 36						; size = 4
_hblocks$ = 40						; size = 4
_remainder$ = 44					; size = 4
_incpitch$ = 48						; size = 4
_height$ = 52						; size = 4
?clense@@YAXPAEHPBEH1H1HHHHH@Z PROC			; clense
; File c:\temp\irc\rg2\removegrain.cpp
; Line 4838
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 4839
	mov	eax, DWORD PTR _incpitch$[ebp]
; Line 4840
	mov	ebx, DWORD PTR _pp$[ebp]
; Line 4841
	add	DWORD PTR _dpitch$[ebp], eax
; Line 4842
	add	DWORD PTR _spitch$[ebp], eax
; Line 4843
	add	DWORD PTR _ppitch$[ebp], eax
; Line 4844
	add	DWORD PTR _npitch$[ebp], eax
; Line 4845
	mov	esi, DWORD PTR __sp$[ebp]
; Line 4846
	mov	edi, DWORD PTR _dp$[ebp]
; Line 4847
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 4848
	mov	eax, DWORD PTR _np$[ebp]
; Line 4849
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	9
$_loop$65360:
; Line 4852
	movq	mm0, MMWORD PTR [eax]
	movq	mm1, MMWORD PTR [eax+8]
	movq	mm2, mm0
	movq	mm4, MMWORD PTR [ebx]
	movq	mm3, mm1
	movq	mm5, MMWORD PTR [ebx+8]
	pminub	mm0, mm4
	pminub	mm1, mm5
	pmaxub	mm0, MMWORD PTR [esi]
	pmaxub	mm2, mm4
	pmaxub	mm3, mm5
	pmaxub	mm1, MMWORD PTR [esi+8]
	pminub	mm0, mm2
	pminub	mm1, mm3
	movq	MMWORD PTR [edi], mm0
	movq	MMWORD PTR [edi+8], mm1
; Line 4853
	add	eax, 16					; 00000010H
; Line 4854
	add	esi, 16					; 00000010H
; Line 4855
	add	edi, 16					; 00000010H
; Line 4856
	add	ebx, 16					; 00000010H
; Line 4857
	loop	$_loop$65360
; Line 4859
	movq	mm0, MMWORD PTR [eax+edx]
	movq	mm1, MMWORD PTR [eax+edx+8]
	movq	mm2, mm0
	movq	mm4, MMWORD PTR [ebx+edx]
	movq	mm3, mm1
	movq	mm5, MMWORD PTR [ebx+edx+8]
	pminub	mm0, mm4
	pminub	mm1, mm5
	pmaxub	mm0, MMWORD PTR [esi+edx]
	pmaxub	mm2, mm4
	pmaxub	mm3, mm5
	pmaxub	mm1, MMWORD PTR [esi+edx+8]
	pminub	mm0, mm2
	pminub	mm1, mm3
	movq	MMWORD PTR [edi+edx], mm0
	movq	MMWORD PTR [edi+edx+8], mm1
; Line 4860
	add	esi, DWORD PTR _spitch$[ebp]
; Line 4861
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 4862
	add	ebx, DWORD PTR _ppitch$[ebp]
; Line 4863
	add	eax, DWORD PTR _npitch$[ebp]
; Line 4864
	dec	DWORD PTR _height$[ebp]
; Line 4865
	mov	ecx, DWORD PTR _hblocks$[ebp]
; Line 4866
	jne	$_loop$65360
; Line 4867
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?clense@@YAXPAEHPBEH1H1HHHHH@Z ENDP			; clense
_TEXT	ENDS
PUBLIC	??1Clense@@UAE@XZ				; Clense::~Clense
; Function compile flags: /Odtp
;	COMDAT ??_GClense@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GClense@@UAEPAXI@Z PROC				; Clense::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Clense@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GClense@@UAEPAXI@Z ENDP				; Clense::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1Clense@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Clense@@UAE@XZ PROC					; Clense::~Clense, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericClense@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1Clense@@UAE@XZ ENDP					; Clense::~Clense
_TEXT	ENDS
PUBLIC	??0BMCClense@@QAE@VPClip@@00_N1@Z		; BMCClense::BMCClense
PUBLIC	?CreateMCClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateMCClense
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv154 = -20						; size = 4
$T66011 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_args$ = 12						; size = 8
_user_data$ = 20					; size = 4
_env$ = 24						; size = 4
?CreateMCClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z PROC ; CreateMCClense
; Line 4989
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 4990
	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66011[ebp], eax
	cmp	DWORD PTR $T66011[ebp], 0
	je	SHORT $LN3@CreateMCCl
	push	0
	push	4
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	eax, al
	push	eax
	push	0
	push	3
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	ecx, al
	push	ecx
	push	ecx
	push	esp
	push	2
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	push	ecx
	push	esp
	push	1
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	push	ecx
	push	esp
	push	0
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	mov	ecx, DWORD PTR $T66011[ebp]
	call	??0BMCClense@@QAE@VPClip@@00_N1@Z	; BMCClense::BMCClense
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN4@CreateMCCl
$LN3@CreateMCCl:
	mov	DWORD PTR tv154[ebp], 0
$LN4@CreateMCCl:
	mov	edx, DWORD PTR tv154[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AVSValue@@QAE@PAVIClip@@@Z		; AVSValue::AVSValue
	lea	ecx, DWORD PTR _args$[ebp]
	call	??1AVSValue@@QAE@XZ			; AVSValue::~AVSValue
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4991
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateMCClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ENDP ; CreateMCClense
_TEXT	ENDS
PUBLIC	??_C@_08FPPKFLCM@MCClense?$AA@			; `string'
PUBLIC	??_7BMCClense@@6B@				; BMCClense::`vftable'
PUBLIC	??_R4BMCClense@@6B@				; BMCClense::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBMCClense@@@8				; BMCClense `RTTI Type Descriptor'
PUBLIC	??_R3BMCClense@@8				; BMCClense::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BMCClense@@8				; BMCClense::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BMCClense@@8			; BMCClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetFrame@BMCClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; BMCClense::GetFrame
EXTRN	??_EBMCClense@@UAEPAXI@Z:PROC			; BMCClense::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@BMCClense@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BMCClense@@8 DD FLAT:??_R0?AVBMCClense@@@8 ; BMCClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BMCClense@@8
rdata$r	ENDS
;	COMDAT ??_R2BMCClense@@8
rdata$r	SEGMENT
??_R2BMCClense@@8 DD FLAT:??_R1A@?0A@EA@BMCClense@@8	; BMCClense::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericClense@@8
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
	DD	FLAT:??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R3BMCClense@@8
rdata$r	SEGMENT
??_R3BMCClense@@8 DD 00H				; BMCClense::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2BMCClense@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBMCClense@@@8
_DATA	SEGMENT
??_R0?AVBMCClense@@@8 DD FLAT:??_7type_info@@6B@	; BMCClense `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBMCClense@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BMCClense@@6B@
rdata$r	SEGMENT
??_R4BMCClense@@6B@ DD 00H				; BMCClense::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBMCClense@@@8
	DD	FLAT:??_R3BMCClense@@8
rdata$r	ENDS
;	COMDAT ??_C@_08FPPKFLCM@MCClense?$AA@
CONST	SEGMENT
??_C@_08FPPKFLCM@MCClense?$AA@ DB 'MCClense', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7BMCClense@@6B@
CONST	SEGMENT
??_7BMCClense@@6B@ DD FLAT:??_R4BMCClense@@6B@		; BMCClense::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@BMCClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EBMCClense@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BMCClense@@QAE@VPClip@@00_N1@Z
_TEXT	SEGMENT
tv193 = -28						; size = 4
tv177 = -24						; size = 4
tv167 = -20						; size = 4
tv158 = -16						; size = 4
tv149 = -12						; size = 4
_this$ = -8						; size = 4
_clip$ = 8						; size = 4
__pclip$ = 12						; size = 4
__nclip$ = 16						; size = 4
_grey$ = 20						; size = 1
_planar$ = 24						; size = 1
??0BMCClense@@QAE@VPClip@@00_N1@Z PROC			; BMCClense::BMCClense, COMDAT
; _this$ = ecx
; Line 4977
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _planar$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _grey$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR _clip$[ebp]
	push	edx
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericClense@@QAE@VPClip@@_N1@Z	; GenericClense::GenericClense
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BMCClense@@6B@
	lea	ecx, DWORD PTR __pclip$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	lea	edx, DWORD PTR __nclip$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
; Line 4978
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv149[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 4979
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv158[ebp], eax
	push	0
	push	1
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	mov	edx, DWORD PTR tv158[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
; Line 4980
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv167[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR tv167[ebp]
	push	edx
	mov	eax, DWORD PTR tv167[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
; Line 4981
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv177[ebp], eax
	push	OFFSET ??_C@_08FPPKFLCM@MCClense?$AA@
	mov	eax, DWORD PTR tv177[ebp]
	push	eax
	mov	ecx, DWORD PTR tv177[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	?CompareVideoInfo@@YAXAAUVideoInfo@@ABU1@PBD@Z ; CompareVideoInfo
	add	esp, 12					; 0000000cH
; Line 4982
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv193[ebp], eax
	push	OFFSET ??_C@_08FPPKFLCM@MCClense?$AA@
	mov	edx, DWORD PTR tv193[ebp]
	push	edx
	mov	eax, DWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	?CompareVideoInfo@@YAXAAUVideoInfo@@ABU1@PBD@Z ; CompareVideoInfo
	add	esp, 12					; 0000000cH
; Line 4983
	lea	ecx, DWORD PTR _clip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	lea	ecx, DWORD PTR __pclip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	lea	ecx, DWORD PTR __nclip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0BMCClense@@QAE@VPClip@@00_N1@Z ENDP			; BMCClense::BMCClense
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_vi1$ = 8						; size = 4
_vi2$ = 12						; size = 4
_progname$ = 16						; size = 4
?CompareVideoInfo@@YAXAAUVideoInfo@@ABU1@PBD@Z PROC	; CompareVideoInfo
; Line 82
	push	ebp
	mov	ebp, esp
; Line 83
	mov	eax, DWORD PTR _vi1$[ebp]
	mov	ecx, DWORD PTR _vi2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@CompareVid
	mov	eax, DWORD PTR _vi1$[ebp]
	mov	ecx, DWORD PTR _vi2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN2@CompareVid
	mov	eax, DWORD PTR _vi1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -25				; ffffffe7H
	mov	edx, DWORD PTR _vi2$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, -25				; ffffffe7H
	cmp	ecx, eax
	je	SHORT $LN3@CompareVid
$LN2@CompareVid:
; Line 87
	mov	ecx, DWORD PTR _vi2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _vi1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _vi2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vi1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _vi2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vi1$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG64951
	call	?debug_printf@@YAXPBDZZ			; debug_printf
	add	esp, 28					; 0000001cH
; Line 89
	mov	ecx, DWORD PTR _progname$[ebp]
	push	ecx
	push	OFFSET $SG64952
	mov	edx, DWORD PTR _AVSenvironment
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _AVSenvironment
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	add	esp, 12					; 0000000cH
$LN3@CompareVid:
; Line 91
	mov	eax, DWORD PTR _vi1$[ebp]
	mov	ecx, DWORD PTR _vi2$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jle	SHORT $LN4@CompareVid
	mov	eax, DWORD PTR _vi1$[ebp]
	mov	ecx, DWORD PTR _vi2$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN4@CompareVid:
; Line 92
	pop	ebp
	ret	0
?CompareVideoInfo@@YAXAAUVideoInfo@@ABU1@PBD@Z ENDP	; CompareVideoInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetFrame@BMCClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv128 = -32						; size = 4
tv84 = -28						; size = 4
tv68 = -24						; size = 4
_sf$ = -20						; size = 4
_nf$ = -16						; size = 4
_df$ = -12						; size = 4
_pf$ = -8						; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
_env$ = 20						; size = 4
?GetFrame@BMCClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; BMCClense::GetFrame, COMDAT
; Line 4962
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 4963
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 4964
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	lea	eax, DWORD PTR _sf$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
; Line 4965
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv128[ebp], eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nf$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv128[ebp]
	push	edx
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
; Line 4966
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
; Line 4967
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _i$[ebp], ecx
$LN3@GetFrame@3:
; Line 4970
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+100]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+140]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+128]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+116]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _nf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _pf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ; PlanarAccess::GetWritePtr
	push	eax
	call	?clense@@YAXPAEHPBEH1H1HHHHH@Z		; clense
	add	esp, 48					; 00000030H
; Line 4971
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jns	$LN3@GetFrame@3
; Line 4972
	emms
; Line 4973
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _df$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _nf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _pf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4974
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFrame@BMCClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; BMCClense::GetFrame
_TEXT	ENDS
PUBLIC	??1BMCClense@@UAE@XZ				; BMCClense::~BMCClense
; Function compile flags: /Odtp
;	COMDAT ??_GBMCClense@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBMCClense@@UAEPAXI@Z PROC				; BMCClense::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BMCClense@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBMCClense@@UAEPAXI@Z ENDP				; BMCClense::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1BMCClense@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BMCClense@@UAE@XZ PROC				; BMCClense::~BMCClense, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericClense@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1BMCClense@@UAE@XZ ENDP				; BMCClense::~BMCClense
_TEXT	ENDS
PUBLIC	??0BackwardClense@@QAE@VPClip@@_N1H@Z		; BackwardClense::BackwardClense
PUBLIC	?CreateBackwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateBackwardClense
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = -12						; size = 4
$T66024 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_args$ = 12						; size = 8
_user_data$ = 20					; size = 4
_env$ = 24						; size = 4
?CreateBackwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z PROC ; CreateBackwardClense
; Line 5193
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 5195
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66024[ebp], eax
	cmp	DWORD PTR $T66024[ebp], 0
	je	SHORT $LN3@CreateBack
	push	2
	push	3
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsInt@AVSValue@@QBEHH@Z		; AVSValue::AsInt
	push	eax
	push	0
	push	2
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	eax, al
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	ecx, al
	push	ecx
	push	ecx
	push	esp
	push	0
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	mov	ecx, DWORD PTR $T66024[ebp]
	call	??0BackwardClense@@QAE@VPClip@@_N1H@Z	; BackwardClense::BackwardClense
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN4@CreateBack
$LN3@CreateBack:
	mov	DWORD PTR tv131[ebp], 0
$LN4@CreateBack:
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AVSValue@@QAE@PAVIClip@@@Z		; AVSValue::AVSValue
	lea	ecx, DWORD PTR _args$[ebp]
	call	??1AVSValue@@QAE@XZ			; AVSValue::~AVSValue
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 5196
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateBackwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ENDP ; CreateBackwardClense
_TEXT	ENDS
PUBLIC	??_7BackwardClense@@6B@				; BackwardClense::`vftable'
PUBLIC	??_R4BackwardClense@@6B@			; BackwardClense::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBackwardClense@@@8			; BackwardClense `RTTI Type Descriptor'
PUBLIC	??_R3BackwardClense@@8				; BackwardClense::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BackwardClense@@8				; BackwardClense::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BackwardClense@@8			; BackwardClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetFrame@BackwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; BackwardClense::GetFrame
EXTRN	??_EBackwardClense@@UAEPAXI@Z:PROC		; BackwardClense::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@BackwardClense@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BackwardClense@@8 DD FLAT:??_R0?AVBackwardClense@@@8 ; BackwardClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BackwardClense@@8
rdata$r	ENDS
;	COMDAT ??_R2BackwardClense@@8
rdata$r	SEGMENT
??_R2BackwardClense@@8 DD FLAT:??_R1A@?0A@EA@BackwardClense@@8 ; BackwardClense::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericClense@@8
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
	DD	FLAT:??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R3BackwardClense@@8
rdata$r	SEGMENT
??_R3BackwardClense@@8 DD 00H				; BackwardClense::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2BackwardClense@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBackwardClense@@@8
_DATA	SEGMENT
??_R0?AVBackwardClense@@@8 DD FLAT:??_7type_info@@6B@	; BackwardClense `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBackwardClense@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BackwardClense@@6B@
rdata$r	SEGMENT
??_R4BackwardClense@@6B@ DD 00H				; BackwardClense::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBackwardClense@@@8
	DD	FLAT:??_R3BackwardClense@@8
rdata$r	ENDS
;	COMDAT ??_7BackwardClense@@6B@
CONST	SEGMENT
??_7BackwardClense@@6B@ DD FLAT:??_R4BackwardClense@@6B@ ; BackwardClense::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@BackwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EBackwardClense@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0BackwardClense@@QAE@VPClip@@_N1H@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
_this$ = -8						; size = 4
_clip$ = 8						; size = 4
_grey$ = 12						; size = 1
_planar$ = 16						; size = 1
_cache$ = 20						; size = 4
??0BackwardClense@@QAE@VPClip@@_N1H@Z PROC		; BackwardClense::BackwardClense, COMDAT
; _this$ = ecx
; Line 5161
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _planar$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _grey$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR _clip$[ebp]
	push	edx
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0GenericClense@@QAE@VPClip@@_N1@Z	; GenericClense::GenericClense
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BackwardClense@@6B@
; Line 5162
	cmp	DWORD PTR _cache$[ebp], 0
	jl	SHORT $LN2@BackwardCl
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	mov	eax, DWORD PTR tv136[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
$LN2@BackwardCl:
; Line 5163
	lea	ecx, DWORD PTR _clip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0BackwardClense@@QAE@VPClip@@_N1H@Z ENDP		; BackwardClense::BackwardClense
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetFrame@BackwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv142 = -32						; size = 4
tv93 = -28						; size = 4
tv72 = -24						; size = 4
_sf$ = -20						; size = 4
_df$ = -16						; size = 4
_next1$ = -12						; size = 4
_next2$ = -8						; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
_env$ = 20						; size = 4
?GetFrame@BackwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; BackwardClense::GetFrame, COMDAT
; Line 5144
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 5145
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 5146
	cmp	DWORD PTR _n$[ebp], 2
	jge	SHORT $LN4@GetFrame@4
	lea	ecx, DWORD PTR _sf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@GetFrame@4
$LN4@GetFrame@4:
; Line 5148
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv93[ebp], eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _next1$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	mov	eax, DWORD PTR tv93[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
; Line 5149
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 2
	push	ecx
	lea	edx, DWORD PTR _next2$[ebp]
	push	edx
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 5150
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+56]
	call	eax
; Line 5151
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _i$[ebp], edx
$LN3@GetFrame@4:
; Line 5154
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+100]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+140]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+128]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+116]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _next2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _next2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _next1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _next1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _sf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ; PlanarAccess::GetWritePtr
	push	eax
	call	?sclense@@YAXPAEHPBEH1H1HHHHH@Z		; sclense
	add	esp, 48					; 00000030H
; Line 5155
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jns	$LN3@GetFrame@4
; Line 5156
	emms
; Line 5157
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _df$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _next2$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _next1$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@GetFrame@4:
; Line 5158
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFrame@BackwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; BackwardClense::GetFrame
; Function compile flags: /Odtp
_TEXT	ENDS
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dpitch$ = 12						; size = 4
__sp$ = 16						; size = 4
_spitch$ = 20						; size = 4
_pp$ = 24						; size = 4
_ppitch$ = 28						; size = 4
_np$ = 32						; size = 4
_npitch$ = 36						; size = 4
_hblocks$ = 40						; size = 4
_remainder$ = 44					; size = 4
_incpitch$ = 48						; size = 4
_height$ = 52						; size = 4
?sclense@@YAXPAEHPBEH1H1HHHHH@Z PROC			; sclense
; Line 5059
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 5060
	mov	eax, DWORD PTR _incpitch$[ebp]
; Line 5061
	mov	ebx, DWORD PTR _pp$[ebp]
; Line 5062
	add	DWORD PTR _dpitch$[ebp], eax
; Line 5063
	add	DWORD PTR _spitch$[ebp], eax
; Line 5064
	add	DWORD PTR _ppitch$[ebp], eax
; Line 5065
	add	DWORD PTR _npitch$[ebp], eax
; Line 5066
	mov	esi, DWORD PTR __sp$[ebp]
; Line 5067
	mov	edi, DWORD PTR _dp$[ebp]
; Line 5068
	mov	edx, DWORD PTR _remainder$[ebp]
; Line 5069
	mov	eax, DWORD PTR _np$[ebp]
; Line 5070
	mov	ecx, DWORD PTR _hblocks$[ebp]
	npad	9
$_loop$65508:
; Line 5073
	movq	mm0, MMWORD PTR [ebx]
	movq	mm1, MMWORD PTR [ebx+8]
	movq	mm2, mm0
	movq	mm4, MMWORD PTR [eax]
	movq	mm3, mm1
	movq	mm5, MMWORD PTR [eax+8]
	pminub	mm0, mm4
	pminub	mm1, mm5
	pmaxub	mm2, mm4
	pmaxub	mm3, mm5
	movq	mm6, mm2
	movq	mm7, mm3
	psubusb	mm6, mm4
	psubusb	mm7, mm5
	psubusb	mm4, mm0
	psubusb	mm5, mm1
	psubusb	mm0, mm4
	psubusb	mm1, mm5
	pmaxub	mm0, MMWORD PTR [esi]
	paddusb	mm2, mm6
	paddusb	mm3, mm7
	pmaxub	mm1, MMWORD PTR [esi+8]
	pminub	mm0, mm2
	pminub	mm1, mm3
	movq	MMWORD PTR [edi], mm0
	movq	MMWORD PTR [edi+8], mm1
; Line 5074
	add	eax, 16					; 00000010H
; Line 5075
	add	esi, 16					; 00000010H
; Line 5076
	add	edi, 16					; 00000010H
; Line 5077
	add	ebx, 16					; 00000010H
; Line 5078
	loop	$_loop$65508
; Line 5080
	movq	mm0, MMWORD PTR [ebx+edx]
	movq	mm1, MMWORD PTR [ebx+edx+8]
	movq	mm2, mm0
	movq	mm4, MMWORD PTR [eax+edx]
	movq	mm3, mm1
	movq	mm5, MMWORD PTR [eax+edx+8]
	pminub	mm0, mm4
	pminub	mm1, mm5
	pmaxub	mm2, mm4
	pmaxub	mm3, mm5
	movq	mm6, mm2
	movq	mm7, mm3
	psubusb	mm6, mm4
	psubusb	mm7, mm5
	psubusb	mm4, mm0
	psubusb	mm5, mm1
	psubusb	mm0, mm4
	psubusb	mm1, mm5
	pmaxub	mm0, MMWORD PTR [esi+edx]
	paddusb	mm2, mm6
	paddusb	mm3, mm7
	pmaxub	mm1, MMWORD PTR [esi+edx+8]
	pminub	mm0, mm2
	pminub	mm1, mm3
	movq	MMWORD PTR [edi+edx], mm0
	movq	MMWORD PTR [edi+edx+8], mm1
; Line 5081
	add	esi, DWORD PTR _spitch$[ebp]
; Line 5082
	add	edi, DWORD PTR _dpitch$[ebp]
; Line 5083
	add	ebx, DWORD PTR _ppitch$[ebp]
; Line 5084
	add	eax, DWORD PTR _npitch$[ebp]
; Line 5085
	dec	DWORD PTR _height$[ebp]
; Line 5086
	mov	ecx, DWORD PTR _hblocks$[ebp]
; Line 5087
	jne	$_loop$65508
; Line 5088
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?sclense@@YAXPAEHPBEH1H1HHHHH@Z ENDP			; sclense
_TEXT	ENDS
PUBLIC	??1BackwardClense@@UAE@XZ			; BackwardClense::~BackwardClense
; Function compile flags: /Odtp
;	COMDAT ??_GBackwardClense@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBackwardClense@@UAEPAXI@Z PROC			; BackwardClense::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BackwardClense@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBackwardClense@@UAEPAXI@Z ENDP			; BackwardClense::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1BackwardClense@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BackwardClense@@UAE@XZ PROC				; BackwardClense::~BackwardClense, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GenericClense@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1BackwardClense@@UAE@XZ ENDP				; BackwardClense::~BackwardClense
_TEXT	ENDS
PUBLIC	??0ForwardClense@@QAE@VPClip@@_N1H@Z		; ForwardClense::ForwardClense
PUBLIC	?CreateForwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateForwardClense
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = -12						; size = 4
$T66035 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_args$ = 12						; size = 8
_user_data$ = 20					; size = 4
_env$ = 24						; size = 4
?CreateForwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z PROC ; CreateForwardClense
; Line 5199
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 5201
	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66035[ebp], eax
	cmp	DWORD PTR $T66035[ebp], 0
	je	SHORT $LN3@CreateForw
	push	2
	push	3
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsInt@AVSValue@@QBEHH@Z		; AVSValue::AsInt
	push	eax
	push	0
	push	2
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	eax, al
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsBool@AVSValue@@QBE_N_N@Z		; AVSValue::AsBool
	movzx	ecx, al
	push	ecx
	push	ecx
	push	esp
	push	0
	lea	ecx, DWORD PTR _args$[ebp]
	call	??AAVSValue@@QBEABV0@H@Z		; AVSValue::operator[]
	mov	ecx, eax
	call	?AsClip@AVSValue@@QBE?AVPClip@@XZ	; AVSValue::AsClip
	mov	ecx, DWORD PTR $T66035[ebp]
	call	??0ForwardClense@@QAE@VPClip@@_N1H@Z	; ForwardClense::ForwardClense
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN4@CreateForw
$LN3@CreateForw:
	mov	DWORD PTR tv131[ebp], 0
$LN4@CreateForw:
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AVSValue@@QAE@PAVIClip@@@Z		; AVSValue::AVSValue
	lea	ecx, DWORD PTR _args$[ebp]
	call	??1AVSValue@@QAE@XZ			; AVSValue::~AVSValue
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 5202
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateForwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ENDP ; CreateForwardClense
_TEXT	ENDS
PUBLIC	??_7ForwardClense@@6B@				; ForwardClense::`vftable'
PUBLIC	??_R4ForwardClense@@6B@				; ForwardClense::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVForwardClense@@@8			; ForwardClense `RTTI Type Descriptor'
PUBLIC	??_R3ForwardClense@@8				; ForwardClense::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ForwardClense@@8				; ForwardClense::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ForwardClense@@8			; ForwardClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetFrame@ForwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; ForwardClense::GetFrame
EXTRN	??_EForwardClense@@UAEPAXI@Z:PROC		; ForwardClense::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ForwardClense@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ForwardClense@@8 DD FLAT:??_R0?AVForwardClense@@@8 ; ForwardClense::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ForwardClense@@8
rdata$r	ENDS
;	COMDAT ??_R2ForwardClense@@8
rdata$r	SEGMENT
??_R2ForwardClense@@8 DD FLAT:??_R1A@?0A@EA@ForwardClense@@8 ; ForwardClense::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BackwardClense@@8
	DD	FLAT:??_R1A@?0A@EA@GenericClense@@8
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
	DD	FLAT:??_R1EA@?0A@EA@PlanarAccess@@8
rdata$r	ENDS
;	COMDAT ??_R3ForwardClense@@8
rdata$r	SEGMENT
??_R3ForwardClense@@8 DD 00H				; ForwardClense::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2ForwardClense@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVForwardClense@@@8
_DATA	SEGMENT
??_R0?AVForwardClense@@@8 DD FLAT:??_7type_info@@6B@	; ForwardClense `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVForwardClense@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ForwardClense@@6B@
rdata$r	SEGMENT
??_R4ForwardClense@@6B@ DD 00H				; ForwardClense::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVForwardClense@@@8
	DD	FLAT:??_R3ForwardClense@@8
rdata$r	ENDS
;	COMDAT ??_7ForwardClense@@6B@
CONST	SEGMENT
??_7ForwardClense@@6B@ DD FLAT:??_R4ForwardClense@@6B@	; ForwardClense::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@ForwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@GenericVideoFilter@@UAGXHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EForwardClense@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0ForwardClense@@QAE@VPClip@@_N1H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_clip$ = 8						; size = 4
_grey$ = 12						; size = 1
_planar$ = 16						; size = 1
_cache$ = 20						; size = 4
??0ForwardClense@@QAE@VPClip@@_N1H@Z PROC		; ForwardClense::ForwardClense, COMDAT
; _this$ = ecx
; Line 5187
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _planar$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _grey$[ebp]
	push	edx
	push	ecx
	mov	ecx, esp
	lea	eax, DWORD PTR _clip$[ebp]
	push	eax
	call	??0PClip@@QAE@ABV0@@Z			; PClip::PClip
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BackwardClense@@QAE@VPClip@@_N1H@Z	; BackwardClense::BackwardClense
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ForwardClense@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	sub	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], eax
	lea	ecx, DWORD PTR _clip$[ebp]
	call	??1PClip@@QAE@XZ			; PClip::~PClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0ForwardClense@@QAE@VPClip@@_N1H@Z ENDP		; ForwardClense::ForwardClense
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetFrame@ForwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
tv143 = -32						; size = 4
tv94 = -28						; size = 4
tv72 = -24						; size = 4
_sf$ = -20						; size = 4
_df$ = -16						; size = 4
_next1$ = -12						; size = 4
_next2$ = -8						; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
_env$ = 20						; size = 4
?GetFrame@ForwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; ForwardClense::GetFrame, COMDAT
; Line 5170
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 5171
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 5172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+152]
	jl	SHORT $LN4@GetFrame@5
	lea	eax, DWORD PTR _sf$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@GetFrame@5
$LN4@GetFrame@5:
; Line 5174
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	push	edx
	lea	eax, DWORD PTR _next1$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
; Line 5175
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??CPClip@@QBEPAVIClip@@XZ		; PClip::operator->
	mov	DWORD PTR tv143[ebp], eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 2
	push	eax
	lea	ecx, DWORD PTR _next2$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
; Line 5176
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
; Line 5177
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _i$[ebp], ecx
$LN3@GetFrame@5:
; Line 5180
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+100]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+140]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+128]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+116]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _next2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _next2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _next1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _next1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetReadPtr@PlanarAccess@@QAEPBEAAVPVideoFrame@@H@Z ; PlanarAccess::GetReadPtr
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR _df$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPitch@PlanarAccess@@QAEHAAVPVideoFrame@@H@Z ; PlanarAccess::GetPitch
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _df$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetWritePtr@PlanarAccess@@QAEPAEAAVPVideoFrame@@H@Z ; PlanarAccess::GetWritePtr
	push	eax
	call	?sclense@@YAXPAEHPBEH1H1HHHHH@Z		; sclense
	add	esp, 48					; 00000030H
; Line 5181
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jns	$LN3@GetFrame@5
; Line 5182
	emms
; Line 5183
	lea	ecx, DWORD PTR _df$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0PVideoFrame@@QAE@ABV0@@Z		; PVideoFrame::PVideoFrame
	lea	ecx, DWORD PTR _df$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _next2$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _next1$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	lea	ecx, DWORD PTR _sf$[ebp]
	call	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@GetFrame@5:
; Line 5184
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetFrame@ForwardClense@@EAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; ForwardClense::GetFrame
_TEXT	ENDS
PUBLIC	??1ForwardClense@@UAE@XZ			; ForwardClense::~ForwardClense
; Function compile flags: /Odtp
;	COMDAT ??_GForwardClense@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GForwardClense@@UAEPAXI@Z PROC			; ForwardClense::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ForwardClense@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GForwardClense@@UAEPAXI@Z ENDP			; ForwardClense::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1ForwardClense@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ForwardClense@@UAE@XZ PROC				; ForwardClense::~ForwardClense, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BackwardClense@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1ForwardClense@@UAE@XZ ENDP				; ForwardClense::~ForwardClense
_TEXT	ENDS
PUBLIC	_AvisynthPluginInit2@4
; Function compile flags: /Odtp
_TEXT	SEGMENT
_env$ = 8						; size = 4
_AvisynthPluginInit2@4 PROC
; Line 5209
	push	ebp
	mov	ebp, esp
; Line 5226
	push	0
	push	OFFSET ?CreateRemoveGrain@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateRemoveGrain
	push	OFFSET $SG65637
	push	OFFSET $SG65638
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	call	eax
; Line 5227
	push	0
	push	OFFSET ?CreateClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateClense
	push	OFFSET $SG65639
	push	OFFSET $SG65640
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	call	ecx
; Line 5228
	push	0
	push	OFFSET ?CreateMCClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateMCClense
	push	OFFSET $SG65641
	push	OFFSET $SG65642
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	call	edx
; Line 5229
	push	0
	push	OFFSET ?CreateBackwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateBackwardClense
	push	OFFSET ?clenseargs@@3PADA		; clenseargs
	push	OFFSET $SG65643
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	call	eax
; Line 5230
	push	0
	push	OFFSET ?CreateForwardClense@@YA?AVAVSValue@@V1@PAXPAVIScriptEnvironment@@@Z ; CreateForwardClense
	push	OFFSET ?clenseargs@@3PADA		; clenseargs
	push	OFFSET $SG65644
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	call	ecx
; Line 5233
	mov	edx, DWORD PTR _env$[ebp]
	mov	DWORD PTR _AVSenvironment, edx
; Line 5234
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	and	eax, 8
	jne	SHORT $LN1@AvisynthPl
; Line 5238
	push	OFFSET $SG65646
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	add	esp, 8
$LN1@AvisynthPl:
; Line 5243
	mov	eax, OFFSET $SG65647
; Line 5244
	pop	ebp
	ret	4
_AvisynthPluginInit2@4 ENDP
_TEXT	ENDS
END
